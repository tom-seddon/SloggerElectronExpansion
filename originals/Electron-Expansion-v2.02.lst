
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass --quiet --nostart --case-sensitive -Wall --verbose-list --list=/Users/tom/beeb/code/SloggerElectronExpansion/build/Electron-Expansion-v2.02.lst --output=/Users/tom/beeb/code/SloggerElectronExpansion/build/Electron-Expansion-v2.02.rom Electron-Expansion-v2.02.s65
; Tue May 16 01:09:44 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Processing input file: Electron-Expansion-v2.02.s65

						                .include "submodules/beeb/include/beeb.s65"

;******  Processing file: submodules/beeb/include/beeb.s65

						;-------------------------------------------------------------------------
						;
						; BBC Micro include file for 64tass
						;
						; Copyright (C) 2018-9 Tom Seddon
						;
						; This program is free software: you can redistribute it and/or
						; modify it under the terms of the GNU General Public License as
						; published by the Free Software Foundation, either version 3 of the
						; License, or (at your option) any later version.
						;
						; This program is distributed in the hope that it will be useful, but
						; WITHOUT ANY WARRANTY; without even the implied warranty of
						; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
						; General Public License for more details.
						;
						; You should have received a copy of the GNU General Public License
						; along with this program. If not, see
						; <https://www.gnu.org/licenses/>.
						;
						;-------------------------------------------------------------------------
						;
						;-------------------------------------------------------------------------

						; MOS entry points

						                .weak
=$ffb9						osrdsc=$ffb9
=$ffbf						oseven=$ffbf
=$ffc2						gsinit=$ffc2
=$ffc5						gsread=$ffc5
=$ffce						osfind=$ffce
=$ffd1						osgbpb=$ffd1
=$ffd4						osbput=$ffd4
=$ffd7						osbget=$ffd7
=$ffdd						osfile=$ffdd
=$ffda						osargs=$ffda
=$ffe0						osrdch=$ffe0
=$ffe3						osasci=$ffe3
=$ffe7						osnewl=$ffe7
=$ffee						oswrch=$ffee
=$fff1						osword=$fff1
=$fff4						osbyte=$fff4
=$fff7						oscli=$fff7
						                .endweak

						;-------------------------------------------------------------------------

						; Vectors

						                .weak
=$200						userv=$200
=$202						brkv=$202
=$204						irq1v=$204
=$206						irq2v=$206
=$208						cliv=$208
=$20a						bytev=$20a
=$20c						wordv=$20c
=$20e						wrchv=$20e
=$210						rdchv=$210
=$212						filev=$212
=$214						argsv=$214
=$216						bgetv=$216
=$218						bputv=$218
=$21a						gbpbv=$21a
=$21c						findv=$21c
=$21e						fscv=$21e
=$220						eventv=$220
=$222						uptv=$222
=$226						vduv=$226
=$228						keyv=$228
=$22a						insv=$22a
=$22c						remv=$22c
=$22e						cnpv=$22e
=$230						ind1v=$230
=$232						ind2v=$232
=$234						ind3v=$234
						                .endweak

						;-------------------------------------------------------------------------

						; Key codes
						                .weak
=$62						key_space=$62
=$66						key_comma=$66
=$17						key_minus=$17
=$67						key_stop=$67
=$68						key_slash=$68
=$27						key_0=$27
=$30						key_1=$30
=$31						key_2=$31
=$11						key_3=$11
=$12						key_4=$12
=$13						key_5=$13
=$34						key_6=$34
=$24						key_7=$24
=$15						key_8=$15
=$26						key_9=$26
=$48						key_colon=$48
=$57						key_semicolon=$57
=$47						key_at=$47
=$41						key_a=$41
=$64						key_b=$64
=$52						key_c=$52
=$32						key_d=$32
=$22						key_e=$22
=$43						key_f=$43
=$53						key_g=$53
=$54						key_h=$54
=$25						key_i=$25
=$45						key_j=$45
=$46						key_k=$46
=$56						key_l=$56
=$65						key_m=$65
=$55						key_n=$55
=$36						key_o=$36
=$37						key_p=$37
=$10						key_q=$10
=$33						key_r=$33
=$51						key_s=$51
=$23						key_t=$23
=$35						key_u=$35
=$63						key_v=$63
=$21						key_w=$21
=$42						key_x=$42
=$44						key_y=$44
=$61						key_z=$61
=$38						key_left_square_bracket=$38
=$78						key_backslash=$78
=$58						key_right_square_bracket=$58
=$18						key_caret=$18
=$28						key_underline=$28
=$70						key_escape=$70
=$60						key_tab=$60
=$40						key_caps_lock=$40
=$1						key_ctrl=$1
=$50						key_shift_lock=$50
=$0						key_shift=$0
=$59						key_delete=$59
=$69						key_copy=$69
=$49						key_return=$49
=$39						key_up=$39
=$29						key_down=$29
=$19						key_left=$19
=$79						key_right=$79
=$20						key_f0=$20
=$71						key_f1=$71
=$72						key_f2=$72
=$73						key_f3=$73
=$14						key_f4=$14
=$74						key_f5=$74
=$75						key_f6=$75
=$16						key_f7=$16
=$76						key_f8=$76
=$77						key_f9=$77
						                .endweak

						inkey: .sfunction _key,(-(_key+1))&$ff

						;-------------------------------------------------------------------------

						; Tube transfer reasons

=0						tube_multi_byte_parasite_to_host=0
=1						tube_multi_byte_host_to_parasite=1
=2						tube_multi_pairs_parasite_to_host=2
=3						tube_multi_pairs_host_to_parasite=3
=4						tube_execute=4
=6						tube_256_byte_parasite_to_host=6
=7						tube_256_byte_host_to_parasite=7

						;-------------------------------------------------------------------------

						; Hardware stuff

						;-------------------------------------------------------------------------

						; ROMSEL
						                .weak
						                .virtual $fe30
>fe30						romsel: .fill 0
						                .endv
						                .endweak

						;-------------------------------------------------------------------------

						; ACCCON
						                .weak
						                .virtual $fe34
.fe34						acccon: .block
						;D=1 = display shadow RAM; D=0 = display main RAM
=$01						d=$01

						;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
						;VDU code accesses main RAM
=$02						e=$02

						;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
=$04						x=$04

						;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
=$08						y=$08

						;ITU=1 = access internal Tube; ITU=0 = access external Tube
=$10						itu=$10

						;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
						;accesses 1MHz bus
=$20						ifj=$20

						; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
						; $fc00...$feff
=$40						tst=$40

						;IRR=1 = IRQ to CPU
=$80						irr=$80
						                .bend
						                .endv
						                .endweak

						;-------------------------------------------------------------------------

						                .weak
						                .virtual $fe20
.fe20						video_ula_control: .block
						; Flashing colour select
=$01						flash=$01

						; If set, teletext mode
=$02						teletext=$02

						; Shift rate
=$0c						shift_rate_mask=$0c
=$0c						shift_rate_16MHz=$0c
=$08						shift_rate_8MHz=$08
=$04						shift_rate_4MHz=$04
=$00						shift_rate_2MHz=$00

						; 2MHz CRTC flag
=$10						crtc_2MHz=$10

						; Cursor bits
=$e0						cursor_mask=$e0
						                .bend
						                .endv
						                .endweak

						                .weak
=$fe21						video_ula_palette=$fe21
						                .endweak

						;-------------------------------------------------------------------------

.0000						VIAIRQ: .block
=$01						ca2=$01
=$02						ca1=$02
=$04						shift=$04
=$08						cb2=$08
=$10						cb1=$10
=$20						t2=$20
=$40						t1=$40
						                .bend

.0000						VIA: .struct                    ;
.0000						orb:
.0000						irb:
>0000						                .fill 1         ;0
.0001						ora:
.0001						ira:
>0001						                .fill 1         ;1
.0002						ddrb:
>0002						                .fill 1         ;2
.0003						ddra:
>0003						                .fill 1         ;3
.0004						t1c_l:
>0004						                .fill 1         ;4
.0005						t1c_h:
>0005						                .fill 1         ;5
.0006						t1l_l:
>0006						                .fill 1         ;6
.0007						t1l_h:
>0007						                .fill 1         ;7
.0008						t2c_l:
>0008						                .fill 1         ;8
.0009						t2c_h:
>0009						                .fill 1         ;9
.000a						sr:
>000a						                .fill 1         ;10
.000b						acr:
>000b						                .fill 1         ;11
.000c						pcr:
>000c						                .fill 1         ;12
.000d						ifr:
>000d						                .fill 1         ;13
.000e						ier:
>000e						                .fill 1         ;14
.000f						ora_no_handshake:
.000f						ira_no_handshake:
>000f						                .fill 1         ;15
						                .ends

						                .virtual $fe40
.fe40						system_via: .dstruct VIA
.fe40						orb:
.fe40						irb:
>fe40						                .fill 1         ;0
.fe41						ora:
.fe41						ira:
>fe41						                .fill 1         ;1
.fe42						ddrb:
>fe42						                .fill 1         ;2
.fe43						ddra:
>fe43						                .fill 1         ;3
.fe44						t1c_l:
>fe44						                .fill 1         ;4
.fe45						t1c_h:
>fe45						                .fill 1         ;5
.fe46						t1l_l:
>fe46						                .fill 1         ;6
.fe47						t1l_h:
>fe47						                .fill 1         ;7
.fe48						t2c_l:
>fe48						                .fill 1         ;8
.fe49						t2c_h:
>fe49						                .fill 1         ;9
.fe4a						sr:
>fe4a						                .fill 1         ;10
.fe4b						acr:
>fe4b						                .fill 1         ;11
.fe4c						pcr:
>fe4c						                .fill 1         ;12
.fe4d						ifr:
>fe4d						                .fill 1         ;13
.fe4e						ier:
>fe4e						                .fill 1         ;14
.fe4f						ora_no_handshake:
.fe4f						ira_no_handshake:
>fe4f						                .fill 1         ;15
						                .ends
						                .endv

						                .virtual $fe60
.fe60						user_via: .dstruct VIA
.fe60						orb:
.fe60						irb:
>fe60						                .fill 1         ;0
.fe61						ora:
.fe61						ira:
>fe61						                .fill 1         ;1
.fe62						ddrb:
>fe62						                .fill 1         ;2
.fe63						ddra:
>fe63						                .fill 1         ;3
.fe64						t1c_l:
>fe64						                .fill 1         ;4
.fe65						t1c_h:
>fe65						                .fill 1         ;5
.fe66						t1l_l:
>fe66						                .fill 1         ;6
.fe67						t1l_h:
>fe67						                .fill 1         ;7
.fe68						t2c_l:
>fe68						                .fill 1         ;8
.fe69						t2c_h:
>fe69						                .fill 1         ;9
.fe6a						sr:
>fe6a						                .fill 1         ;10
.fe6b						acr:
>fe6b						                .fill 1         ;11
.fe6c						pcr:
>fe6c						                .fill 1         ;12
.fe6d						ifr:
>fe6d						                .fill 1         ;13
.fe6e						ier:
>fe6e						                .fill 1         ;14
.fe6f						ora_no_handshake:
.fe6f						ira_no_handshake:
>fe6f						                .fill 1         ;15
						                .ends
						                .endv

						;-------------------------------------------------------------------------

						                .virtual $fee0

>fee0						tube_fifo1_status: .fill 1
>fee1						tube_fifo1_data: .fill 1
>fee2						tube_fifo2_status: .fill 1
>fee3						tube_fifo2_data: .fill 1
>fee4						tube_fifo3_status: .fill 1
>fee5						tube_fifo3_data: .fill 1
>fee6						tube_fifo4_status: .fill 1
>fee7						tube_fifo4_data: .fill 1

						                .endv

						;-------------------------------------------------------------------------
						;
						; 1770/1772. Use .dstruct to put this wherever necessary.

.0000						WD177x: .struct
.0000						status:
.0000						command:
>0000						                .fill 1
.0001						track:
>0001						                .fill 1
.0002						sector:
>0002						                .fill 1
.0003						data:
>0003						                .fill 1
						                .ends

						;-------------------------------------------------------------------------

						; if language_entry is 0, no language entry.
						;
						; if version_string is empty, no version string.
						emit_rom_header .macro language_entry,service_entry,version_number,title_string,version_string,copyright_string
						                .endm

						;-------------------------------------------------------------------------
						;
						; BASIC stuff
						;

						basic_line_number: .macro n
						                .endm

.0000						tokens: .block
=$80						AND=$80
=$81						DIV=$81
=$82						EOR=$82
=$83						MOD=$83
=$84						OR=$84
=$85						ERROR=$85
=$86						LINE=$86
=$87						OFF=$87
=$88						STEP=$88
=$89						SPC=$89
=$8a						TAB_=$8a
=$8b						ELSE=$8b
=$8c						THEN=$8c
=$8d						line_number=$8d
=$8e						OPENIN=$8e
=$8f						PTR_rvalue=$8f
=$90						PAGE_rvalue=$90
=$91						TIME_rvalue=$91
=$92						LOMEM_rvalue=$92
=$93						HIMEM_rvalue=$93
=$94						ABS=$94
=$95						ACS=$95
=$96						ADVAL=$96
=$97						ASC=$97
=$98						ASN=$98
=$99						ATN=$99
=$9a						BGET=$9a
=$9b						COS=$9b
=$9c						COUNT_rvalue=$9c
=$9d						DEG=$9d
=$9e						ERL=$9e
=$9f						ERR=$9f
=$a0						EVAL=$a0
=$a1						EXP=$a1
=$a2						EXT=$a2
=$a3						FALSE=$a3
=$a4						FN=$a4
=$a5						GET=$a5
=$a6						INKEY=$a6
=$a7						INSTR_=$a7
=$a8						INT=$a8
=$a9						LEN=$a9
=$aa						LN=$aa
=$ab						LOG=$ab
=$ac						NOT=$ac
=$ad						OPENUP=$ad
=$ae						OPENOUT=$ae
=$af						PI=$af
=$b0						POINT_=$b0
=$b1						POS=$b1
=$b2						RAD=$b2
=$b3						RND=$b3
=$b4						SGN=$b4
=$b5						SIN=$b5
=$b6						SQR=$b6
=$b7						TAN=$b7
=$b8						TO=$b8
=$b9						TRUE=$b9
=$ba						USR=$ba
=$bb						VAL=$bb
=$bc						VPOS=$bc
=$bd						CHR_=$bd
=$be						GET_=$be
=$bf						INKEY_=$bf
=$c0						LEFT__=$c0
=$c1						MID__=$c1
=$c2						RIGHT__=$c2
=$c3						STR_=$c3
=$c4						STRING__=$c4
=$c5						EOF=$c5
=$c6						AUTO=$c6
=$c7						DELETE=$c7
=$c8						LOAD=$c8
=$c9						LIST=$c9
=$ca						NEW=$ca
=$cb						OLD=$cb
=$cc						RENUMBER=$cc
=$cd						SAVE=$cd
=$cf						PTR_lvalue=$cf
=$d0						PAGE_lvalue=$d0
=$d1						TIME_lvalue=$d1
=$d2						LOMEM_lvalue=$d2
=$d3						HIMEM_lvalue=$d3
=$d4						SOUND=$d4
=$d5						BPUT=$d5
=$d6						CALL=$d6
=$d7						CHAIN=$d7
=$d8						CLEAR=$d8
=$d9						CLOSE=$d9
=$da						CLG=$da
=$db						CLS=$db
=$dc						DATA=$dc
=$dd						DEF=$dd
=$de						DIM=$de
=$df						DRAW=$df
=$e0						END=$e0
=$e1						ENDPROC=$e1
=$e2						ENVELOPE=$e2
=$e3						FOR=$e3
=$e4						GOSUB=$e4
=$e5						GOTO=$e5
=$e6						GCOL=$e6
=$e7						IF=$e7
=$e8						INPUT=$e8
=$e9						LET=$e9
=$ea						LOCAL=$ea
=$eb						MODE=$eb
=$ec						MOVE=$ec
=$ed						NEXT=$ed
=$ee						ON=$ee
=$ef						VDU=$ef
=$f0						PLOT=$f0
=$f1						PRINT=$f1
=$f2						PROC=$f2
=$f3						READ=$f3
=$f4						REM=$f4
=$f5						REPEAT=$f5
=$f6						REPORT=$f6
=$f7						RESTORE=$f7
=$f8						RETURN=$f8
=$f9						RUN=$f9
=$fa						STOP=$fa
=$fb						COLOUR=$fb
=$fc						TRACE=$fc
=$fd						UNTIL=$fd
=$fe						WIDTH=$fe
=$ff						OSCLI=$ff
						                .endblock


;******  Return to file: Electron-Expansion-v2.02.s65


						;-------------------------------------------------------------------------
						;
						; ROM zero page
						;

=$a8						L00A8=$A8
=$a9						L00A9=$A9
=$aa						L00AA=$AA
=$ab						L00AB=$AB
=$ac						L00AC=$AC
=$ad						L00AD=$AD

=$b0						wptr=$b0
=$b2						L00B2=$b2
=$b3						L00B3=$b3

						;-------------------------------------------------------------------------
						;
						; OS zero page
						;

=$e7						os_auto_repeat_countdown=$e7 ; EAUG3 p187
=$ef						os_a=$ef ; A value for osbyte/osword
=$f0						os_x=$f0 ; X value for osbyte/osword
=$f1						os_y=$f1 ; Y value for osbyte/osword
=$f2						L00F2=$f2
=$f4						L00F4=$f4

=$f6						L00F6=$f6
=$f7						L00F7=$f7
=$fa						L00FA=$fa
=$fb						L00FB=$fb
=$fc						L00FC=$fc
=$ff						L00FF=$ff

						;-------------------------------------------------------------------------
						;
						; Stack regions
						;

						; Buffer for BRK stuff.
=$100						L0100=$100

						; Various addresses in the little thunks that get copied to the stack.
						; Needs rationalising - these should be expressed as offsets into the
						; corresponding blocks of code.
=$138						L0138=$138
=$140						L0140=$140
=$14d						L014D=$14d
=$14e						L014E=$14e
=$150						L0150=$150
=$151						L0151=$151
=$152						L0152=$152
=$153						L0153=$153
=$154						L0154=$154

						; Default address for joystick thunk.
=$155						default_joystick_overlay_address=$155

=$150						line_input_pblock=$150
=$155						line_input_data=$155

						;-------------------------------------------------------------------------
						;
						; OS page 2/3
						;
=$24c						os_current_adc_channel=$24c
=$255						L0255=$255
=$27f						os_shadow_ram_flag=$27f
=$285						os_printer_destination=$285 ; set by *FX5
						                ; 0 = BREAK
						                ; 1 = power on
						                ; 2 = CTRL+BREAK
=$28d						os_last_reset_type=$28d

						                ; Flags ($0290 - unused by Electron OS)
						                ; %.a....jj    %jj = joystick interface to use
						                ;                a = 0=ADC, 1=9-pin joysticks
=$290						os_unused=$290
=$2a0						os_rom_types=$2a0
=$2c3						os_buffer_busy_flags=$2c3
=$2cf						L02CF=$2cf
=$2d8						L02D8=$2d8
=$2f7						os_last_adc_channel=$2f7
=$2f8						os_adc_lsbs=$2f8
=$2fc						os_adc_msbs=$2fc
=$355						os_screen_mode=$355

						;-------------------------------------------------------------------------
						;
						; Plus One workspace
						;
=$d68						poll_flags=$d68
=$d69						serial_baud_rates=$d69
=$d6a						serial_flags=$d6a
=$d6b						L0D6B=$D6B
=$d6c						L0D6C=$D6C
=$d6d						L0D6D=$D6D
=$d6e						L0D6E=$D6E
=$dde						L0DDE=$dde
=$ddf						L0DDF=$ddf

						;-------------------------------------------------------------------------
						;
						; ???
						;

=$2000						rload_ram_buffer=$2000
=$156						file_name_buffer=$156
=$1fe0						rload_osfile_pblock=$1fe0

						; L1FE3=$1fe3
						; L1FEA=$1fea
						; L1FEB=$1feb
						; L1FEF=$1fef

						;-------------------------------------------------------------------------
						;
						; Plus One hardware
						;

=$fc60						LFC60=$fc60
=$fc61						xhw_serial_baud_rates=$fc61
=$fc62						LFC62=$FC62
=$fc63						LFC63=$FC63
=$fc64						LFC64=$FC64
=$fc65						LFC65=$FC65
=$fc6d						LFC6D=$FC6D
=$fc6e						LFC6E=$FC6E
=$fc6f						LFC6F=$FC6F

						; Read: 8-bit ADC result
						; Write: ADC channel to convert (4 = ch1, 5 = ch2, etc.)
=$fc70						plus1_adc=$fc70

=$fc71						plus1_printer=$fc71

						; Read:
						;   7   6   5   4   3   2   1   0    BSY = printer busy
						; +---+---+---+---+---+---+---+---+  ADC = ADC conversion end
						; |BSY|ADC|FB1|FB2|               |  FB1 = fire button 1
						; +---+---+---+---+---+---+---+---+  FB2 = fire button 2
						; Write:
						; (looks like there's some kind of printer strobe in bit 4)
=$fc72						plus1_status=$fc72

=$fc73						LFC73=$fc73

						;-------------------------------------------------------------------------
						;
						; Stuff in ROM
						;

=$ffb7						default_vectors_ptr=$ffb7

						; FF9C: PLA:<<restore that ROM>>:PLA:PLP:RTS
=$ff9c						LFF9C=$ff9c

						; nonsense address in the Electron OS, but presumably meaningful with
						; the rombox?
=$fbfd						LFBFD=$fbfd

						;-------------------------------------------------------------------------

						*=$8000
>8000		00				                .byte 0
>8001		00				                .byte 0
>8002		00				                .byte 0

						;-------------------------------------------------------------------------

.8003		4c 45 80	jmp $8045	                jmp service_entry

						;-------------------------------------------------------------------------

>8006		82				                .byte $82       ; ROM type - $80 = has service entry
						                                ;            $02 = 6502 code
>8007		34				                .byte <copyright ; copyright offset
>8008		00				                .byte 0         ; ROM version
>8009		45 6c 65 63 74 72 6f 6e		rom_title:      .text "Electron Expansion"
>8011		20 45 78 70 61 6e 73 69 6f 6e
>801b		7f 7f 7f 7f 7f 7f 7f 7f		                .byte $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F ; 0 ; as many DELs as length of ROM title
>8023		7f 7f 7f
>8026		7f 7f 7f 7f 7f 7f 7f		                .byte $7F, $7F, $7F, $7F, $7F, $7F, $7F                    ; 11
>802d		0b				                .byte $B        ; cursor up
>802e		0b				                .byte $B        ; cursor up
>802f		00				                .byte 0
>8030		32 2e 30 32			rom_version_string:.text "2.02"
.8034						copyright:
>8034		00				                .byte 0
>8035		28 43 29 31 39 38 38 20		rom_copyright_string:.text "(C)1988 Slogger"
>803d		53 6c 6f 67 67 65 72
>8044		00				                .byte 0

						;-------------------------------------------------------------------------

.8045						service_entry:
.8045		08		php		                php
.8046		aa		tax		                tax
.8047		e0 16		cpx #$16	                cpx #$16
.8049		b0 0c		bcs $8057	                bcs L8057    ; taken if service >=$16
.804b		48		pha		                pha
.804c		0a		asl a		                asl a
.804d		aa		tax		                tax
.804e		bd 5c 80	lda $805c,x	                lda service_routines+1,x
.8051		48		pha		                pha
.8052		bd 5b 80	lda $805b,x	                lda service_routines,x
.8055		48		pha		                pha
.8056		60		rts		                rts

						;-------------------------------------------------------------------------

.8057						L8057:
.8057		a6 f4		ldx $f4		                ldx L00F4
.8059		28		plp		                plp
.805a		60		rts		                rts

						;-------------------------------------------------------------------------

>805b		86 80				service_routines:.word svc_nop-1
>805d		90 80				                .word svc_absolute_fs_space_claim-1
>805f		86 80				                .word svc_nop-1
>8061		86 80				                .word svc_nop-1
>8063		b6 80				                .word svc_star-1
>8065		74 85				                .word svc_irq-1
>8067		e5 89				                .word svc_brk-1
>8069		10 88				                .word svc_osbyte-1
>806b		86 80				                .word svc_nop-1
>806d		83 84				                .word svc_help-1
>806f		86 80				                .word svc_nop-1
>8071		86 80				                .word svc_nop-1
>8073		86 80				                .word svc_nop-1
>8075		86 80				                .word svc_nop-1
>8077		86 80				                .word svc_nop-1
>8079		86 80				                .word svc_nop-1
>807b		86 80				                .word svc_nop-1
>807d		86 80				                .word svc_nop-1
>807f		86 80				                .word svc_nop-1
>8081		2a 86				                .word svc_rs423_buffer-1
>8083		33 86				                .word svc_printer_buffer-1
>8085		04 86				                .word svc_100Hz_poll-1

						;-------------------------------------------------------------------------

.8087						svc_nop:
.8087		a6 f4		ldx $f4		                ldx L00F4
.8089		68		pla		                pla
.808a		28		plp		                plp
.808b		60		rts		                rts

						;-------------------------------------------------------------------------

.808c						svc_claimed:
.808c		68		pla		                pla
.808d		a9 00		lda #$00	                lda #0
.808f		28		plp		                plp
.8090		60		rts		                rts

						;-------------------------------------------------------------------------

.8091						svc_absolute_fs_space_claim:
.8091		98		tya		                tya
.8092		48		pha		                pha
.8093		a9 00		lda #$00	                lda #0
.8095		8d 68 0d	sta $0d68	                sta poll_flags
.8098		8d 6b 0d	sta $0d6b	                sta L0D6B
.809b		a2 04		ldx #$04	                ldx #4
.809d		20 dc 87	jsr $87dc	                jsr set_adc_sampling_channels
.80a0		ad 8d 02	lda $028d	                lda os_last_reset_type; 0 = BREAK
						                                      ; 1 = power on
						                                      ; 2 = CTRL+BREAK
.80a3		29 03		and #$03	                and #3
.80a5		c9 01		cmp #$01	                cmp #1
.80a7		90 06		bcc $80af	                bcc L80AF    ; taken if soft BREAK
.80a9		a2 01		ldx #$01	                ldx #1
.80ab		8e 85 02	stx $0285	                stx os_printer_destination; set by *FX5
.80ae		38		sec		                sec

.80af						L80AF:
.80af		20 23 89	jsr $8923	                jsr reset_serial
.80b2		68		pla		                pla
.80b3		a8		tay		                tay
.80b4		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.80b7						svc_star:
.80b7		8a		txa		                txa
.80b8		48		pha		                pha
.80b9		98		tya		                tya
.80ba		48		pha		                pha
.80bb		a2 00		ldx #$00	                ldx #0
.80bd		a2 00		ldx #$00	                ldx #0
.80bf		20 3d 92	jsr $923d	                jsr find_command; Try to find command in commands table
						                                ; Entry: ($f2),y = pointer to string
						                                ;        X = offset into command_table
						                                ; Exit:
.80c2		90 07		bcc $80cb	                bcc L80CB
.80c4		68		pla		                pla
.80c5		a8		tay		                tay
.80c6		68		pla		                pla
.80c7		aa		tax		                tax
.80c8		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.80cb						L80CB:
.80cb		18		clc		                clc
.80cc		20 7b 84	jsr $847b	                jsr call_command_table_routine; Call routine from command table
						                                              ; Entry: X = offset of address in table
.80cf		68		pla		                pla
.80d0		a8		tay		                tay
.80d1		68		pla		                pla
.80d2		aa		tax		                tax
.80d3		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.80d6						L80D6:
.80d6		a2 76		ldx #$76	                ldx #$76
.80d8		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.80db						cmd_joystick:
.80db		90 2a		bcc $8107	                bcc cmd_joystick_do
.80dd		a2 00		ldx #$00	                ldx #0

.80df						cmd_joystick_help:
.80df		20 58 85	jsr $8558	                jsr print_following_string
>80e2		0d				                .byte $D
>80e3		0a				                .byte $A
>80e4		20 20 2a 4a 4f 59 53 54		                .text "  *JOYSTICK 1-4 "
>80ec		49 43 4b 20 31 2d 34 20
>80f4		00				                .byte 0
.80f5						L80F5:
.80f5		bd 9a 99	lda $999a,x	                lda cmd_joystick_banner,x
.80f8		f0 06		beq $8100	                beq L8100
.80fa		20 ee ff	jsr $ffee	                jsr oswrch
.80fd		e8		inx		                inx
.80fe		d0 f5		bne $80f5	                bne L80F5

.8100						L8100:
.8100		e8		inx		                inx
.8101		bd 9a 99	lda $999a,x	                lda cmd_joystick_banner,x
.8104		d0 d9		bne $80df	                bne cmd_joystick_help
.8106		60		rts		                rts

						;-------------------------------------------------------------------------

.8107						cmd_joystick_do:
.8107		20 e9 81	jsr $81e9	                jsr reset_default_vectors; Reset BYTEV and KEYV to their default values.
.810a		20 41 93	jsr $9341	                jsr is_string_empty      ; Check if command line tail is empty.
						                                         ; Entry: ($f2),y = command line tail
						                                         ; Exit:  C=0 - something on command line
						                                         ;        C=1 - nothing on command line
.810d		b0 c7		bcs $80d6	                bcs L80D6
.810f		20 b7 94	jsr $94b7	                jsr strtoi
.8112		aa		tax		                tax
.8113		ca		dex		                dex
.8114		e0 04		cpx #$04	                cpx #4
.8116		b0 be		bcs $80d6	                bcs L80D6
.8118		86 b0		stx $b0		                stx wptr
.811a		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.811d		29 fc		and #$fc	                and #$FC        ; clear joystick bits
.811f		05 b0		ora $b0		                ora wptr        ; set joystick bits
.8121		8d 90 02	sta $0290	                sta os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.8124		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.8127		b0 68		bcs $8191	                bcs L8191
.8129		98		tya		                tya
.812a		48		pha		                pha
.812b		a2 51		ldx #$51	                ldx #joystick_subcommands-command_table;
.812d		20 3d 92	jsr $923d	                jsr find_command; Try to find command in commands table
						                                ; Entry: ($f2),y = pointer to string
						                                ;        X = offset into command_table
						                                ; Exit:
.8130		68		pla		                pla
.8131		a8		tay		                tay
.8132		90 1f		bcc $8153	                bcc L8153
.8134		a2 00		ldx #$00	                ldx #0

.8136						L8136:
.8136		20 b7 94	jsr $94b7	                jsr strtoi
.8139		49 ff		eor #$ff	                eor #$FF
.813b		29 7f		and #$7f	                and #$7F
.813d		85 b0		sta $b0		                sta wptr
.813f		8a		txa		                txa
.8140		48		pha		                pha
.8141		bd f7 83	lda $83f7,x	                lda rom_banks_table,x; table holding ROM bank numbers for 5 unused ROMs
.8144		aa		tax		                tax
.8145		a5 b0		lda $b0		                lda wptr
.8147		9d a0 02	sta $02a0,x	                sta os_rom_types,x
.814a		68		pla		                pla
.814b		aa		tax		                tax
.814c		e8		inx		                inx
.814d		e0 05		cpx #$05	                cpx #5

.814f						L814F:
.814f		d0 e5		bne $8136	                bne L8136
.8151		f0 27		beq $817a	                beq L817A

.8153						L8153:
.8153		20 7b 84	jsr $847b	                jsr call_command_table_routine; Call routine from command table
						                                              ; Entry: X = offset of address in table
.8156		20 58 85	jsr $8558	                jsr print_following_string
>8159		0d				                .byte $D
>815a		4f 76 65 72 6c 61 79 20		                .text "Overlay address : "
>8162		61 64 64 72 65 73 73 20 3a 20
>816c		00				                .byte 0
.816d		20 9a 81	jsr $819a	                jsr read_line
.8170		a9 55		lda #$55	                lda #<default_joystick_overlay_address
.8172		85 f2		sta $f2		                sta L00F2
.8174		a9 01		lda #$01	                lda #>default_joystick_overlay_address
.8176		85 f3		sta $f3		                sta L00F2+1
.8178		a0 00		ldy #$00	                ldy #0

.817a						L817A:
.817a		a9 50		lda #$50	                lda #$50
.817c		85 b0		sta $b0		                sta wptr
.817e		a9 01		lda #$01	                lda #1
.8180		85 b1		sta $b1		                sta wptr+1
.8182		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.8185		b0 07		bcs $818e	                bcs L818E       ; taken if string empty
.8187		20 b7 94	jsr $94b7	                jsr strtoi
.818a		05 b1		ora $b1		                ora wptr+1
.818c		f0 03		beq $8191	                beq L8191

.818e						L818E:
.818e		20 bc 81	jsr $81bc	                jsr L81BC

.8191						L8191:
.8191		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.8194		09 40		ora #$40	                ora #$40
.8196		8d 90 02	sta $0290	                sta os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.8199		60		rts		                rts

						;-------------------------------------------------------------------------

.819a						read_line:      .block
.819a		a9 55		lda #$55	                lda #<line_input_data
.819c		8d 50 01	sta $0150	                sta line_input_pblock+0
.819f		a9 01		lda #$01	                lda #>line_input_data
.81a1		8d 51 01	sta $0151	                sta line_input_pblock+1
.81a4		a9 05		lda #$05	                lda #5
.81a6		8d 52 01	sta $0152	                sta line_input_pblock+2
.81a9		a9 20		lda #$20	                lda #32
.81ab		8d 53 01	sta $0153	                sta line_input_pblock+3
.81ae		a9 7f		lda #$7f	                lda #127
.81b0		8d 54 01	sta $0154	                sta line_input_pblock+4
.81b3		a2 50		ldx #$50	                ldx #<line_input_pblock
.81b5		a0 01		ldy #$01	                ldy #>line_input_pblock
.81b7		a9 00		lda #$00	                lda #0
.81b9		4c f1 ff	jmp $fff1	                jmp osword
						                .endblock

						;-------------------------------------------------------------------------

.81bc						L81BC:       .block
.81bc		08		php		                php
.81bd		78		sei		                sei
.81be		a0 0d		ldy #$0d	                ldy #$D

.81c0						loop:
.81c0		b9 13 82	lda $8213,y	                lda ram_thunk,y
.81c3		91 b0		sta ($b0),y	                sta (wptr),y
.81c5		88		dey		                dey
.81c6		10 f8		bpl $81c0	                bpl loop
.81c8		a5 b0		lda $b0		                lda wptr
.81ca		8d 28 02	sta $0228	                sta keyv
.81cd		a5 b1		lda $b1		                lda wptr+1
.81cf		8d 29 02	sta $0229	                sta keyv+1
.81d2		18		clc		                clc
.81d3		a5 b0		lda $b0		                lda wptr
.81d5		69 02		adc #$02	                adc #2
.81d7		85 b0		sta $b0		                sta wptr
.81d9		90 02		bcc $81dd	                bcc L81DD
.81db		e6 b1		inc $b1		                inc wptr+1

.81dd						L81DD:
.81dd		a5 b0		lda $b0		                lda wptr
.81df		8d 0a 02	sta $020a	                sta bytev
.81e2		a5 b1		lda $b1		                lda wptr+1
.81e4		8d 0b 02	sta $020b	                sta bytev+1
.81e7		28		plp		                plp
.81e8		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Reset BYTEV and KEYV to their default values.

.81e9						reset_default_vectors:.block
.81e9		08		php		                php
.81ea		78		sei		                sei
.81eb		98		tya		                tya
.81ec		48		pha		                pha
.81ed		ad b7 ff	lda $ffb7	                lda default_vectors_ptr
.81f0		85 b0		sta $b0		                sta wptr
.81f2		ad b8 ff	lda $ffb8	                lda default_vectors_ptr+1
.81f5		85 b1		sta $b1		                sta wptr+1
.81f7		a0 0a		ldy #$0a	                ldy #$A         ; $0a = offset of BYTEV

.81f9						reset_bytev_loop:
.81f9		b1 b0		lda ($b0),y	                lda (wptr),y
.81fb		99 00 02	sta $0200,y	                sta $200,y
.81fe		c8		iny		                iny
.81ff		c0 0c		cpy #$0c	                cpy #$C
.8201		d0 f6		bne $81f9	                bne reset_bytev_loop
.8203		a0 28		ldy #$28	                ldy #$28        ; $28 = offset of KEYV

.8205						reset_keyv_loop:
.8205		b1 b0		lda ($b0),y	                lda (wptr),y
.8207		99 00 02	sta $0200,y	                sta $200,y
.820a		c8		iny		                iny
.820b		c0 2a		cpy #$2a	                cpy #$2A
.820d		d0 f6		bne $8205	                bne reset_keyv_loop
.820f		68		pla		                pla
.8210		a8		tay		                tay
.8211		28		plp		                plp
.8212		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8213						ram_thunk:
.8213		a9 19		lda #$19	                lda #$19
						; BYTEV entry point is here
						; ($19 is an unused OSBYTE, so the ROM code checks for the KEYV entry that way)
.8215		08		php		                php
.8216		78		sei		                sei
.8217		85 ef		sta $ef		                sta os_a        ; A value for osbyte/osword
.8219		a9 0c		lda #$0c	                lda #$C
.821b		8d 05 fe	sta $fe05	                sta $fe05
.821e		4c 25 82	jmp $8225	                jmp thunk_entry

						;-------------------------------------------------------------------------

>8221		c0				fred_offsets:   .byte $C0
						                ; offset of joystick I/O by joystick index
						                ; (see table on p6 of Elk Expansion manual)
>8222		d0				                .byte $D0
>8223		e0				                .byte $E0
>8224		f0				                .byte $F0

						;-------------------------------------------------------------------------

.8225						thunk_entry:
.8225		68		pla		                pla             ; restore P
.8226		85 f0		sta $f0		                sta os_x        ; save P
.8228		a5 f4		lda $f4		                lda L00F4
.822a		48		pha		                pha             ; save actual old ROM slot
.822b		a9 0c		lda #$0c	                lda #$C
.822d		85 f4		sta $f4		                sta L00F4     ; make $f4 and ROMSEL consistent
						; Prepare return address
.822f		a9 82		lda #$82	                lda #>thunk_exit-1
.8231		48		pha		                pha
.8232		a9 45		lda #$45	                lda #<thunk_exit-1
.8234		48		pha		                pha
.8235		a5 f0		lda $f0		                lda os_x        ; restore P
.8237		48		pha		                pha             ; save P
.8238		a5 ef		lda $ef		                lda os_a        ; A value for osbyte/osword
.823a		c9 19		cmp #$19	                cmp #$19
.823c		f0 20		beq $825e	                beq thunked_keyv; taken if this is actually KEYV
.823e		c9 81		cmp #$81	                cmp #$81
.8240		f0 27		beq $8269	                beq thunked_osbyte_81h; taken if this is OSBYTE $81
.8242		28		plp		                plp
.8243		4c 8c 82	jmp $828c	                jmp call_default_osbyte; Call default OSBYTE routine

						;-------------------------------------------------------------------------

.8246						thunk_exit:
.8246		48		pha		                pha
.8247		08		php		                php
.8248		8a		txa		                txa
.8249		48		pha		                pha
.824a		ba		tsx		                tsx
.824b		bd 04 01	lda $0104,x	                lda $104,x
.824e		48		pha		                pha
.824f		bd 02 01	lda $0102,x	                lda $102,x
.8252		9d 04 01	sta $0104,x	                sta $104,x
.8255		68		pla		                pla
.8256		9d 02 01	sta $0102,x	                sta $102,x
.8259		68		pla		                pla
.825a		aa		tax		                tax
.825b		4c 9c ff	jmp $ff9c	                jmp LFF9C    ; FF9C: PLA:<<restore that ROM>>:PLA:PLP:RTS

						;-------------------------------------------------------------------------

.825e						thunked_keyv:
.825e		28		plp		                plp
.825f		70 05		bvs $8266	                bvs L8266    ; taken if called by timer interrupt service (no-op)
.8261		90 03		bcc $8266	                bcc L8266    ; taken if testing SHIFT/CTRL (no-op)
.8263		4c 47 83	jmp $8347	                jmp thunked_scan_keyboard; call as if KEYV with C=1 V=0

						;-------------------------------------------------------------------------

.8266						L8266:
.8266		4c 95 82	jmp $8295	                jmp call_default_keyv; Call default KEYV routine

						;-------------------------------------------------------------------------

.8269						thunked_osbyte_81h:
.8269		28		plp		                plp
.826a		c0 80		cpy #$80	                cpy #$80
.826c		90 51		bcc $82bf	                bcc L82BF
.826e		e0 00		cpx #$00	                cpx #0
.8270		f0 46		beq $82b8	                beq L82B8
.8272		48		pha		                pha
.8273		98		tya		                tya
.8274		48		pha		                pha
.8275		8a		txa		                txa
.8276		48		pha		                pha
.8277		49 ff		eor #$ff	                eor #$FF
.8279		29 7f		and #$7f	                and #$7F
.827b		20 bb 83	jsr $83bb	                jsr check_joystick_key; Check if a key is "pressed" by the joystick.
						                                      ; Entry: A = internal key number
						                                      ; Exit:  A=$ff if key pressed
						                                      ;        A=$00 if key not pressed
.827e		f0 07		beq $8287	                beq L8287          ; taken if key not pressed
						; set X/Y as per OSBYTE $81
.8280		aa		tax		                tax
.8281		a8		tay		                tay
.8282		38		sec		                sec
.8283		68		pla		                pla
.8284		68		pla		                pla
.8285		68		pla		                pla
.8286		60		rts		                rts

						;-------------------------------------------------------------------------

.8287						L8287:
.8287		68		pla		                pla
.8288		aa		tax		                tax
.8289		68		pla		                pla
.828a		a8		tay		                tay
.828b		68		pla		                pla

						;-------------------------------------------------------------------------

						; Call default OSBYTE routine

.828c						call_default_osbyte:.block
.828c		08		php		                php             ; save input P
.828d		78		sei		                sei
.828e		48		pha		                pha             ; save input A
.828f		84 f1		sty $f1		                sty os_y        ; save input Y
.8291		a0 0a		ldy #$0a	                ldy #$A         ; $0A = offset of BYTEV
.8293		d0 07		bne $829c	                bne call_default_vector_routine; JMP, in effect
						                .endblock

						;-------------------------------------------------------------------------

						; Call default KEYV routine

.8295						call_default_keyv:.block
.8295		08		php		                php             ; save input P
.8296		78		sei		                sei
.8297		48		pha		                pha             ; save input A
.8298		84 f1		sty $f1		                sty os_y        ; save input Y
.829a		a0 28		ldy #$28	                ldy #$28        ; $28 = offset of KEYV
						                .endblock

.829c						call_default_vector_routine:
.829c		ad b7 ff	lda $ffb7	                lda default_vectors_ptr
.829f		85 ef		sta $ef		                sta os_a        ; LSB of default vector table address
.82a1		ad b8 ff	lda $ffb8	                lda default_vectors_ptr+1
.82a4		85 f0		sta $f0		                sta os_x        ; MSB of default vector table address
.82a6		b1 ef		lda ($ef),y	                lda (os_a),y    ; get LSB of routine
.82a8		48		pha		                pha             ; save LSB of routine
.82a9		c8		iny		                iny
.82aa		b1 ef		lda ($ef),y	                lda (os_a),y    ; get MSB of routise
.82ac		85 f0		sta $f0		                sta os_x        ; store MSB of routine
.82ae		68		pla		                pla             ; restore LSB of routine
.82af		85 ef		sta $ef		                sta os_a        ; store LSB of routine
.82b1		a4 f1		ldy $f1		                ldy os_y        ; restore input Y
.82b3		68		pla		                pla             ; restore input A
.82b4		28		plp		                plp             ; restore input P
.82b5		6c ef 00	jmp ($00ef)	                jmp (os_a)      ; A value for osbyte/osword

						;-------------------------------------------------------------------------

.82b8						L82B8:
.82b8		a2 01		ldx #$01	                ldx #1
.82ba		a5 ef		lda $ef		                lda os_a        ; A value for osbyte/osword
.82bc		a0 00		ldy #$00	                ldy #0
.82be		60		rts		                rts

						;-------------------------------------------------------------------------

.82bf						L82BF:
.82bf		98		tya		                tya
.82c0		49 ff		eor #$ff	                eor #$FF
.82c2		a8		tay		                tay
.82c3		8a		txa		                txa
.82c4		49 ff		eor #$ff	                eor #$FF
.82c6		aa		tax		                tax

.82c7						L82C7:
.82c7		8a		txa		                txa
.82c8		48		pha		                pha
.82c9		98		tya		                tya
.82ca		48		pha		                pha
						; 1 centisecond
.82cb		a0 00		ldy #$00	                ldy #0
.82cd		a2 01		ldx #$01	                ldx #1
.82cf		a9 81		lda #$81	                lda #$81        ; Read key within time limit (INKEY)
						                                ; (EAUG p45)
.82d1		20 8c 82	jsr $828c	                jsr call_default_osbyte; Call default OSBYTE routine
.82d4		c8		iny		                iny                    ; If key pressed: Y=$01
						                                       ; If key not pressed: Y=$00
.82d5		d0 29		bne $8300	                bne L8300           ; taken if key pressed
.82d7		20 93 83	jsr $8393	                jsr read_joystick_key  ; Read key "pressed" by joystick
						                                       ; Exit: Y=$00, C=0 - key pressed
						                                       ;                    A = action index
						                                       ;                    X = ASCII code
						                                       ;       Y=$ff, C=1 - no key pressed
.82da		c8		iny		                iny                    ; If key pressed: Y=$01
						                                       ; If key not pressed: Y=$00
.82db		d0 11		bne $82ee	                bne L82EE           ; taken if key pressed
.82dd		a9 01		lda #$01	                lda #1
.82df		85 e7		sta $e7		                sta os_auto_repeat_countdown; EAUG3 p187

.82e1						L82E1:
.82e1		68		pla		                pla
.82e2		a8		tay		                tay
.82e3		68		pla		                pla
.82e4		aa		tax		                tax
.82e5		e8		inx		                inx
.82e6		d0 df		bne $82c7	                bne L82C7
.82e8		c8		iny		                iny
.82e9		d0 dc		bne $82c7	                bne L82C7
.82eb		88		dey		                dey
.82ec		38		sec		                sec
.82ed		60		rts		                rts

						;-------------------------------------------------------------------------

.82ee						L82EE:
.82ee		a5 e7		lda $e7		                lda os_auto_repeat_countdown; EAUG3 p187
.82f0		f0 04		beq $82f6	                beq L82F6
.82f2		c6 e7		dec $e7		                dec os_auto_repeat_countdown; EAUG3 p187
.82f4		d0 eb		bne $82e1	                bne L82E1

.82f6						L82F6:
.82f6		ad 55 02	lda $0255	                lda L0255    ; TODO - shouldn't this be lda #$ff?
						                                ; Presumably intended to reset the countdown timer
.82f9		85 e7		sta $e7		                sta os_auto_repeat_countdown; EAUG3 p187
.82fb		68		pla		                pla
.82fc		68		pla		                pla
.82fd		88		dey		                dey
.82fe		38		sec		                sec
.82ff		60		rts		                rts

						;-------------------------------------------------------------------------

.8300						L8300:
.8300		88		dey		                dey
.8301		68		pla		                pla
.8302		68		pla		                pla
.8303		60		rts		                rts

						;-------------------------------------------------------------------------

.8304						handle_digital_adval_unused:.block
.8304		c9 80		cmp #$80	                cmp #$80
.8306		d0 84		bne $828c	                bne call_default_osbyte; Call default OSBYTE routine
.8308		e0 05		cpx #$05	                cpx #5
.830a		b0 80		bcs $828c	                bcs call_default_osbyte; Call default OSBYTE routine
.830c		48		pha		                pha
.830d		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.8310		29 03		and #$03	                and #3          ; mask out joystick bits
.8312		a8		tay		                tay
.8313		b9 21 82	lda $8221,y	                lda fred_offsets,y; offset of joystick I/O by joystick index
						                                  ; (see table on p6 of Elk Expansion manual)
.8316		a8		tay		                tay
.8317		b9 00 fc	lda $fc00,y	                lda $FC00,y
.831a		ca		dex		                dex
.831b		10 10		bpl $832d	                bpl L832D
.831d		e8		inx		                inx
.831e		6a		ror a		                ror a
.831f		6a		ror a		                ror a
.8320		10 02		bpl $8324	                bpl L8324
.8322		b0 05		bcs $8329	                bcs L8329

.8324						L8324:
.8324		4a		lsr a		                lsr a
.8325		4a		lsr a		                lsr a
.8326		29 01		and #$01	                and #1
.8328		aa		tax		                tax

.8329						L8329:
.8329		a0 00		ldy #$00	                ldy #0
.832b		68		pla		                pla
.832c		60		rts		                rts

						;-------------------------------------------------------------------------

.832d						L832D:
.832d		a0 00		ldy #$00	                ldy #0
.832f		e0 02		cpx #$02	                cpx #2
.8331		b0 0c		bcs $833f	                bcs L833F
.8333		ca		dex		                dex
.8334		f0 02		beq $8338	                beq L8338
.8336		4a		lsr a		                lsr a
.8337		4a		lsr a		                lsr a

.8338						L8338:
.8338		29 03		and #$03	                and #3
.833a		a8		tay		                tay
.833b		b9 43 83	lda $8343,y	                lda adc_values_table,y
.833e		a8		tay		                tay

.833f						L833F:
.833f		a2 00		ldx #$00	                ldx #0
.8341		68		pla		                pla
.8342		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

>8343		7f				adc_values_table:.byte 127
>8344		ff				                .byte 255
>8345		00				                .byte 0
>8346		7f				                .byte 127

						;-------------------------------------------------------------------------

.8347						thunked_scan_keyboard:
.8347		e0 80		cpx #$80	                cpx #$80
.8349		90 14		bcc $835f	                bcc scan_multiple_keys; taken if scanning a range of keys
						; scanning for specific key
.834b		48		pha		                pha             ; save A
.834c		8a		txa		                txa
.834d		48		pha		                pha             ; save X
.834e		20 bb 83	jsr $83bb	                jsr check_joystick_key; Check if a key is "pressed" by the joystick.
						                                      ; Entry: A = internal key number
						                                      ; Exit:  A=$ff if key pressed
						                                      ;        A=$00 if key not pressed
.8351		d0 08		bne $835b	                bne L835B          ; taken if not pressed
.8353		68		pla		                pla                   ; restore X
.8354		aa		tax		                tax
.8355		68		pla		                pla             ; restore A
.8356		38		sec		                sec
.8357		b8		clv		                clv
.8358		4c 95 82	jmp $8295	                jmp call_default_keyv; Call default KEYV routine

						;-------------------------------------------------------------------------

.835b						L835B:
.835b		aa		tax		                tax             ; X=$ff
.835c		68		pla		                pla             ; discard X
.835d		68		pla		                pla             ; restore A
.835e		60		rts		                rts

						;-------------------------------------------------------------------------

.835f						scan_multiple_keys:
.835f		48		pha		                pha
.8360		a8		tay		                tay
.8361		8a		txa		                txa
.8362		48		pha		                pha
.8363		98		tya		                tya
.8364		38		sec		                sec
.8365		b8		clv		                clv
.8366		20 95 82	jsr $8295	                jsr call_default_keyv; Call default KEYV routine
.8369		86 f1		stx $f1		                stx os_y             ; Save key number pressed (or $ff if none)
.836b		68		pla		                pla                  ; restore input X - key to start scanning from
.836c		85 f0		sta $f0		                sta os_x
.836e		a2 04		ldx #$04	                ldx #4

.8370						L8370:
.8370		20 da 83	jsr $83da	                jsr read_joystick; Read joystick
						                                 ; Entry: X = action index
						                                 ; Exit:  A=$00 if bit set, A=$FF if bit clear
.8373		f0 17		beq $838c	                beq L838C     ; taken if not pressed
.8375		8a		txa		                txa              ; A = action index
.8376		48		pha		                pha              ; save action index
.8377		bd f7 83	lda $83f7,x	                lda rom_banks_table,x; table holding ROM bank numbers for 5 unused ROMs
.837a		aa		tax		                tax
.837b		bd a0 02	lda $02a0,x	                lda os_rom_types,x; get key for this action
.837e		c5 f0		cmp $f0		                cmp os_x
.8380		90 08		bcc $838a	                bcc L838A    ; taken if out of scan range
.8382		f0 06		beq $838a	                beq L838A    ; TODO: Shouldn't equality be OK?
.8384		c5 f1		cmp $f1		                cmp os_y        ; Y value for osbyte/osword
.8386		b0 02		bcs $838a	                bcs L838A    ; taken if >= KEYV result - but why?
.8388		85 f1		sta $f1		                sta os_y        ; overwrite original result with new one

.838a						L838A:
.838a		68		pla		                pla             ; restore action index
.838b		aa		tax		                tax             ; X = action index

.838c						L838C:
.838c		ca		dex		                dex
.838d		10 e1		bpl $8370	                bpl L8370
.838f		a6 f1		ldx $f1		                ldx os_y        ; get KEYV result
.8391		68		pla		                pla
.8392		60		rts		                rts

						;-------------------------------------------------------------------------

						; Read key "pressed" by joystick
						; Exit: Y=$00, C=0 - key pressed
						;                    A = action index
						;                    X = ASCII code
						;       Y=$ff, C=1 - no key pressed

.8393						read_joystick_key:.block
.8393		a2 04		ldx #$04	                ldx #4

.8395						L8395:
.8395		8a		txa		                txa             ; A = action index
.8396		48		pha		                pha             ; Save action index
.8397		20 da 83	jsr $83da	                jsr read_joystick; Read joystick
						                                 ; Entry: X = action index
						                                 ; Exit:  A=$00 if bit set, A=$FF if bit clear
.839a		f0 16		beq $83b2	                beq L83B2
.839c		bd f7 83	lda $83f7,x	                lda rom_banks_table,x; get bank index for action index
.839f		aa		tax		                tax
.83a0		bd a0 02	lda $02a0,x	                lda os_rom_types,x; get key for action
.83a3		c9 7a		cmp #$7a	                cmp #$7A
.83a5		b0 0b		bcs $83b2	                bcs L83B2    ; taken if invalid key number
.83a7		aa		tax		                tax
.83a8		bd fc 83	lda $83fc,x	                lda key_chars_table,x; get ASCII code for that key
.83ab		f0 05		beq $83b2	                beq L83B2         ; taken if not a printable key
.83ad		aa		tax		                tax                  ; X = ASCII code
.83ae		68		pla		                pla                  ; A = action index
.83af		a0 00		ldy #$00	                ldy #0               ; Y = $00
.83b1		60		rts		                rts                  ; C=0

						;-------------------------------------------------------------------------

.83b2						L83B2:
.83b2		68		pla		                pla             ; restore action index
.83b3		aa		tax		                tax
.83b4		ca		dex		                dex
.83b5		10 de		bpl $8395	                bpl L8395    ; keep going for all action indexes
.83b7		a0 ff		ldy #$ff	                ldy #$FF
.83b9		38		sec		                sec
.83ba		60		rts		                rts             ; C=1
						                .endblock

						;-------------------------------------------------------------------------

						; Check if a key is "pressed" by the joystick.
						; Entry: A = internal key number
						; Exit:  A=$ff if key pressed
						;        A=$00 if key not pressed

.83bb						check_joystick_key:.block
.83bb		a2 00		ldx #$00	                ldx #0
						; 0,1 = Second external socket on expansion module (SK2)
						; 2,3 = First external socket on the expansion module (SK1)
						; 4 = Disc
						; 5,6 = USER applications
						; 7 = Modem interface ROM
						; 8,9 = Keyboard
						; 10,11 = BASIC
						; 12 = Expansion module operating system
						; 13 = High priority slot in expansion module
						; 14 = ECONET
						; 15 = Reserved
						; Of the two BASICs, looks like the higher priority one's type byte is filled out.
						; The lower copy is presumably eliminated by the duplicate ROM detection.
.83bd		cd a2 02	cmp $02a2	                cmp os_rom_types+2
.83c0		f0 18		beq $83da	                beq read_joystick; read_joystick with X=0
.83c2		cd a3 02	cmp $02a3	                cmp os_rom_types+3
.83c5		f0 12		beq $83d9	                beq L83D9    ; read_joystick with X=1
.83c7		cd a8 02	cmp $02a8	                cmp os_rom_types+8
.83ca		f0 0c		beq $83d8	                beq L83D8    ; read_joystick with X=2
.83cc		cd a9 02	cmp $02a9	                cmp os_rom_types+9
.83cf		f0 06		beq $83d7	                beq L83D7    ; read_joystick with X=3
.83d1		cd aa 02	cmp $02aa	                cmp os_rom_types+$A
.83d4		d0 19		bne $83ef	                bne L83EF    ; read_joystick with X=4
.83d6		e8		inx		                inx

.83d7						L83D7:
.83d7		e8		inx		                inx

.83d8						L83D8:
.83d8		e8		inx		                inx

.83d9						L83D9:
.83d9		e8		inx		                inx
						                .endblock

						;-------------------------------------------------------------------------

						; Read joystick
						; Entry: X = action index
						; Exit:  A=$00 if bit set, A=$FF if bit clear

.83da						read_joystick:  .block
.83da		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.83dd		29 03		and #$03	                and #3
.83df		a8		tay		                tay
.83e0		b9 21 82	lda $8221,y	                lda fred_offsets,y; offset of joystick I/O by joystick index
						                                  ; (see table on p6 of Elk Expansion manual)
.83e3		a8		tay		                tay
.83e4		b9 00 fc	lda $fc00,y	                lda $FC00,y
.83e7		3d f2 83	and $83f2,x	                and table_1_2_4_8_16,x
.83ea		f0 03		beq $83ef	                beq L83EF
.83ec		a9 ff		lda #$ff	                lda #$FF
.83ee		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.83ef						L83EF:
.83ef		a9 00		lda #$00	                lda #0
.83f1		60		rts		                rts

						;-------------------------------------------------------------------------

>83f2		01				table_1_2_4_8_16:.byte 1
>83f3		02				                .byte 2
>83f4		04				                .byte 4
>83f5		08				                .byte 8
>83f6		10				                .byte $10
>83f7		02				rom_banks_table:.byte 2
						                ; table holding ROM bank numbers for 5 unused ROMs
>83f8		03				                .byte 3         ; first expansion socket
>83f9		08				                .byte 8         ; keyboard
>83fa		09				                .byte 9         ; keyboard
>83fb		0a				                .byte $A        ; lower-priority BASIC
>83fc		00 00 00 00 00 00 00 00		key_chars_table:.byte 0, 0, 0, 0, 0, 0, 0, 0; 0
>8404		00 00 00 00 00 00 00 00		                .byte 0, 0, 0, 0, 0, 0, 0, 0; 8
>840c		51 33 34 35 00 38 00 2d		                .byte $51, $33, $34, $35, 0, $38, 0, $2D; 16
>8414		00 00 00 00 00 00 00 00		                .byte 0, 0, 0, 0, 0, 0, 0, 0            ; 24
>841c		00 57 45 54 37 39 49 30		                .byte 0, $57, $45, $54, $37, $39, $49, $30; 32
>8424		5f 00 00 00 00 00 00 00		                .byte $5F, 0, 0, 0, 0, 0, 0, 0            ; 40
>842c		31 32 44 52 36 55 4f 50		                .byte $31, $32, $44, $52, $36, $55, $4F, $50; 48
>8434		00 00 00 00 00 00 00 00		                .byte 0, 0, 0, 0, 0, 0, 0, 0                ; 56
>843c		00 41 58 46 59 4a 4b 40		                .byte 0, $41, $58, $46, $59, $4A, $4B, $40  ; 64
>8444		3a 00 00 00 00 00 00 00		                .byte $3A, 0, 0, 0, 0, 0, 0, 0              ; 72
>844c		00 53 43 47 48 4e 4c 3b		                .byte 0, $53, $43, $47, $48, $4E, $4C, $3B  ; 80
>8454		00 00 00 00 00 00 00 00		                .byte 0, 0, 0, 0, 0, 0, 0, 0                ; 88
>845c		00 5a 20 56 42 4d 2c 2e		                .byte 0, $5A, $20, $56, $42, $4D, $2C, $2E  ; 96
>8464		2f 00 00 00 00 00 00 00		                .byte $2F, 0, 0, 0, 0, 0, 0, 0              ; 104
>846c		1b 00 00 00 00 00 00 00		                .byte $1B, 0, 0, 0, 0, 0, 0, 0              ; 112
>8474		5c 00				                .byte $5C, 0                                ; 120

						;-------------------------------------------------------------------------

.8476		a2 6d		ldx #$6d	                ldx #$6D        ; TODO: error index
.8478		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

						; Call routine from command table
						; Entry: X = offset of address in table

.847b						call_command_table_routine:.block
.847b		bd 58 94	lda $9458,x	                lda command_table,x; "BUFFER"
.847e		48		pha		                pha
.847f		bd 59 94	lda $9459,x	                lda command_table+1,x
.8482		48		pha		                pha
.8483		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8484						svc_help:
.8484		98		tya		                tya
.8485		48		pha		                pha
.8486		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.8489		b0 37		bcs $84c2	                bcs L84C2       ; taken if *HELP command line empty

.848b						L848B:
.848b		a2 00		ldx #$00	                ldx #0

.848d						L848D:
.848d		98		tya		                tya
.848e		48		pha		                pha
.848f		08		php		                php
.8490		20 3d 92	jsr $923d	                jsr find_command; Try to find command in commands table
						                                ; Entry: ($f2),y = pointer to string
						                                ;        X = offset into command_table
						                                ; Exit:
.8493		b0 18		bcs $84ad	                bcs L84AD
.8495		28		plp		                plp
.8496		8a		txa		                txa
.8497		48		pha		                pha
.8498		b0 03		bcs $849d	                bcs L849D
.849a		20 18 85	jsr $8518	                jsr L8518

.849d						L849D:
.849d		38		sec		                sec             ; Set carry - indicate routine should print its help
.849e		20 7b 84	jsr $847b	                jsr call_command_table_routine; Call routine from command table
						                                              ; Entry: X = offset of address in table
.84a1		20 03 93	jsr $9303	                jsr print_1_newline
.84a4		68		pla		                pla
.84a5		aa		tax		                tax
.84a6		e8		inx		                inx
.84a7		e8		inx		                inx
.84a8		68		pla		                pla
.84a9		a8		tay		                tay
.84aa		38		sec		                sec
.84ab		b0 e0		bcs $848d	                bcs L848D

.84ad						L84AD:
.84ad		28		plp		                plp
.84ae		68		pla		                pla
.84af		a8		tay		                tay

.84b0						L84B0:
.84b0		c8		iny		                iny
.84b1		b1 f2		lda ($f2),y	                lda ($F2),y
.84b3		c9 0d		cmp #$0d	                cmp #$D
.84b5		f0 06		beq $84bd	                beq L84BD
.84b7		c9 20		cmp #$20	                cmp #' '
.84b9		d0 f5		bne $84b0	                bne L84B0
.84bb		f0 ce		beq $848b	                beq L848B

.84bd						L84BD:
.84bd		68		pla		                pla
.84be		a8		tay		                tay
.84bf		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.84c2						L84C2:
.84c2		20 18 85	jsr $8518	                jsr L8518
.84c5		20 58 85	jsr $8558	                jsr print_following_string
>84c8		50 72 69 6e 74 65 72 2c		                .text "Printer,"
>84d0		00				                .byte 0
.84d1		2c 90 02	bit $0290	                bit os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.84d4		70 0a		bvs $84e0	                bvs L84E0    ; taken if ADC not in use
.84d6		20 58 85	jsr $8558	                jsr print_following_string
>84d9		41 44 43			                .text "ADC"
>84dc		00				                .byte 0
.84dd		4c e7 84	jmp $84e7	                jmp L84E7

.84e0						L84E0:
.84e0		20 58 85	jsr $8558	                jsr print_following_string
>84e3		4a 2f 53			                .text "J/S"
>84e6		00				                .byte 0
.84e7						L84E7:
.84e7		20 58 85	jsr $8558	                jsr print_following_string
>84ea		2c 52 53 34 32 33		                .text ",RS423"
>84f0		0d				                .byte $D
>84f1		0a				                .byte $A
>84f2		00				                .byte 0
.84f3		a2 fe		ldx #$fe	                ldx #$FE
.84f5		20 fd 84	jsr $84fd	                jsr L84FD
.84f8		68		pla		                pla
.84f9		a8		tay		                tay
.84fa		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.84fd						L84FD:       .block
.84fd		20 e7 ff	jsr $ffe7	                jsr osnewl
.8500		20 08 93	jsr $9308	                jsr print_1_space
.8503		20 08 93	jsr $9308	                jsr print_1_space
.8506		e8		inx		                inx

.8507						L8507:
.8507		e8		inx		                inx
.8508		bd 58 94	lda $9458,x	                lda command_table,x; "BUFFER"
.850b		f0 08		beq $8515	                beq L8515
.850d		30 ee		bmi $84fd	                bmi L84FD
.850f		20 ee ff	jsr $ffee	                jsr oswrch
.8512		4c 07 85	jmp $8507	                jmp L8507

						;-------------------------------------------------------------------------

.8515						L8515:
.8515		4c e7 ff	jmp $ffe7	                jmp osnewl
						                .endblock

						;-------------------------------------------------------------------------

.8518						L8518:       .block
.8518		20 17 93	jsr $9317	                jsr L9317
.851b		20 58 85	jsr $8558	                jsr print_following_string
>851e		0d				aElectronExpansion:.byte $D
>851f		0a				                .byte $A
>8520		45 6c 65 63 74 72 6f 6e		                .text "Electron Expansion "
>8528		20 45 78 70 61 6e 73 69 6f 6e 20
>8533		00				                .byte 0
.8534		a2 00		ldx #$00	                ldx #0

.8536						L8536:
.8536		bd 30 80	lda $8030,x	                lda rom_version_string,x; "2.02"
.8539		f0 06		beq $8541	                beq L8541

.853b						L853B:
.853b		20 ee ff	jsr $ffee	                jsr oswrch
.853e		e8		inx		                inx
.853f		d0 f5		bne $8536	                bne L8536

.8541						L8541:
.8541		4c e7 ff	jmp $ffe7	                jmp osnewl
						                .endblock

						;-------------------------------------------------------------------------

.8544						L8544:
.8544		20 17 93	jsr $9317	                jsr L9317
.8547		20 58 85	jsr $8558	                jsr print_following_string
>854a		0d				aBuffer:        .byte $D
>854b		0a				                .byte $A
>854c		20 20 2a 42 55 46 46 45		                .text "  *BUFFER "
>8554		52 20
>8556		00				                .byte 0
.8557		60		rts		                rts

						;-------------------------------------------------------------------------

.8558						print_following_string:.block
.8558		84 b2		sty $b2		                sty L00B2
.855a		68		pla		                pla
.855b		85 b0		sta $b0		                sta wptr
.855d		68		pla		                pla
.855e		85 b1		sta $b1		                sta wptr+1
.8560		a0 00		ldy #$00	                ldy #0

.8562						print_following_string_loop:
.8562		20 10 93	jsr $9310	                jsr inc_wptr
.8565		b1 b0		lda ($b0),y	                lda (wptr),y
.8567		f0 06		beq $856f	                beq L856F
.8569		20 ee ff	jsr $ffee	                jsr oswrch
.856c		4c 62 85	jmp $8562	                jmp print_following_string_loop

						;-------------------------------------------------------------------------

.856f						L856F:
.856f		20 10 93	jsr $9310	                jsr inc_wptr
.8572		6c b0 00	jmp ($00b0)	                jmp (wptr)
						                .endblock

						;-------------------------------------------------------------------------

.8575						svc_irq:
.8575		a9 02		lda #$02	                lda #2
.8577		2c 68 0d	bit $0d68	                bit poll_flags
.857a		d0 0e		bne $858a	                bne L858A
.857c		ad 65 fc	lda $fc65	                lda LFC65
.857f		2d 6a 0d	and $0d6a	                and serial_flags
.8582		30 09		bmi $858d	                bmi L858D
.8584		4a		lsr a		                lsr a
.8585		b0 13		bcs $859a	                bcs L859A
.8587		4a		lsr a		                lsr a
.8588		b0 4f		bcs $85d9	                bcs L85D9

.858a						L858A:
.858a		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.858d						L858D:
.858d		a9 04		lda #$04	                lda #4
.858f		2c 64 fc	bit $fc64	                bit LFC64
.8592		d0 03		bne $8597	                bne L8597
.8594		20 6c 89	jsr $896c	                jsr L896C

.8597						L8597:
.8597		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.859a						L859A:
.859a		a9 04		lda #$04	                lda #4
.859c		2c 6d fc	bit $fc6d	                bit LFC6D
.859f		d0 32		bne $85d3	                bne L85D3
.85a1		20 93 89	jsr $8993	                jsr L8993
.85a4		90 15		bcc $85bb	                bcc L85BB
.85a6		a0 f5		ldy #$f5	                ldy #$F5
.85a8		20 48 8a	jsr $8a48	                jsr read_os_variables; read printer destination flag
.85ab		e0 02		cpx #$02	                cpx #2
.85ad		d0 14		bne $85c3	                bne L85C3
.85af		20 99 89	jsr $8999	                jsr remove_printer_buffer_char
.85b2		48		pha		                pha
.85b3		08		php		                php
.85b4		20 50 8a	jsr $8a50	                jsr L8A50
.85b7		28		plp		                plp
.85b8		68		pla		                pla
.85b9		b0 08		bcs $85c3	                bcs L85C3

.85bb						L85BB:
.85bb		8d 63 fc	sta $fc63	                sta LFC63
.85be		a2 00		ldx #$00	                ldx #0
.85c0		4c cb 85	jmp $85cb	                jmp L85CB

						;-------------------------------------------------------------------------

.85c3						L85C3:
.85c3		20 7d 89	jsr $897d	                jsr L897D
.85c6		20 29 87	jsr $8729	                jsr L8729
.85c9		a2 ff		ldx #$ff	                ldx #$FF

.85cb						L85CB:
.85cb		a0 bf		ldy #$bf	                ldy #$BF
.85cd		20 43 8a	jsr $8a43	                jsr write_os_variable; write RS423 use flag
.85d0		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.85d3						L85D3:
.85d3		20 7d 89	jsr $897d	                jsr L897D
.85d6		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.85d9						L85D9:
.85d9		ae 63 fc	ldx $fc63	                ldx LFC63
.85dc		ad 61 fc	lda $fc61	                lda xhw_serial_baud_rates
.85df		29 f0		and #$f0	                and #$F0
.85e1		d0 11		bne $85f4	                bne L85F4
.85e3		8a		txa		                txa
.85e4		20 8e 89	jsr $898e	                jsr L898E
.85e7		20 9f 89	jsr $899f	                jsr check_serial_input_buffer_free_space; Check if there's free space in the serial input buffer.
						                                                        ; Exit: C=1 if >=9 bytes free
.85ea		b0 05		bcs $85f1	                bcs L85F1
.85ec		a9 01		lda #$01	                lda #1
.85ee		8d 6f fc	sta $fc6f	                sta LFC6F

.85f1						L85F1:
.85f1		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.85f4						L85F4:
.85f4		8a		txa		                txa
.85f5		48		pha		                pha
.85f6		ae 61 fc	ldx $fc61	                ldx xhw_serial_baud_rates
.85f9		20 60 89	jsr $8960	                jsr write_40h_to_fc62
.85fc		68		pla		                pla
.85fd		a0 07		ldy #$07	                ldy #7
.85ff		20 bf ff	jsr $ffbf	                jsr oseven
.8602		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.8605						svc_100Hz_poll:
.8605		98		tya		                tya
.8606		48		pha		                pha             ; save semaphore value
.8607		a9 40		lda #$40	                lda #$40
.8609		2c 68 0d	bit $0d68	                bit poll_flags
.860c		f0 03		beq $8611	                beq L8611
.860e		20 50 86	jsr $8650	                jsr handle_printer_buffer_parallel; called if bit 6 set

.8611						L8611:
.8611		58		cli		                cli
.8612		a9 20		lda #$20	                lda #$20
.8614		2c 68 0d	bit $0d68	                bit poll_flags
.8617		f0 03		beq $861c	                beq L861C
.8619		20 af 86	jsr $86af	                jsr poll_adc    ; called if bit 5 set

.861c						L861C:
.861c		a9 10		lda #$10	                lda #$10
.861e		2c 68 0d	bit $0d68	                bit poll_flags
.8621		f0 03		beq $8626	                beq L8626
.8623		20 29 87	jsr $8729	                jsr L8729    ; called if bit 4 set

.8626						L8626:
.8626		68		pla		                pla
.8627		a8		tay		                tay
.8628		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.862b						svc_rs423_buffer:.block
.862b		20 6c 89	jsr $896c	                jsr L896C
.862e		20 30 87	jsr $8730	                jsr L8729.L8730
.8631		4c 8c 80	jmp $808c	                jmp svc_claimed
						                .endblock

						;-------------------------------------------------------------------------

.8634						svc_printer_buffer:.block

.8634		98		tya		                tya
.8635		48		pha		                pha
.8636		20 3e 86	jsr $863e	                jsr L863E
.8639		68		pla		                pla
.863a		a8		tay		                tay
.863b		4c 8c 80	jmp $808c	                jmp svc_claimed
						                .endblock

						;-------------------------------------------------------------------------

.863e						L863E:       .block
.863e		ae 85 02	ldx $0285	                ldx os_printer_destination; set by *FX5
.8641		e0 01		cpx #$01	                cpx #1
.8643		f0 0b		beq $8650	                beq handle_printer_buffer_parallel; taken if parallel printer
.8645		e0 02		cpx #$02	                cpx #2
.8647		d0 06		bne $864f	                bne L864F ; taken if not serial printer
.8649		20 6c 89	jsr $896c	                jsr L896C
.864c		20 30 87	jsr $8730	                jsr L8729.L8730

.864f						L864F:
.864f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8650						handle_printer_buffer_parallel:.block
.8650		2c 72 fc	bit $fc72	                bit plus1_status
.8653		30 55		bmi $86aa	                bmi L86AA    ; taken if printer busy
.8655		20 99 89	jsr $8999	                jsr remove_printer_buffer_char
.8658		b0 47		bcs $86a1	                bcs L86A1    ; taken if printer buffer was empty
						; EAUG says result undefined when removing from buffer?
						; But presumably the removed byte is actually returned.
.865a		8d 71 fc	sta $fc71	                sta plus1_printer
.865d		a9 00		lda #$00	                lda #0
.865f		8d 72 fc	sta $fc72	                sta plus1_status
.8662		a9 10		lda #$10	                lda #$10
.8664		8d 72 fc	sta $fc72	                sta plus1_status
.8667		a2 05		ldx #$05	                ldx #5

.8669						L8669:
.8669		8a		txa		                txa
.866a		48		pha		                pha
.866b		20 a9 89	jsr $89a9	                jsr get_printer_buffer_contents_size
.866e		98		tya		                tya
.866f		d0 04		bne $8675	                bne L8675    ; taken if MSB>0
						;MSB=0
.8671		e0 02		cpx #$02	                cpx #2
.8673		90 22		bcc $8697	                bcc L8697    ; taken if size<2

.8675						L8675:
.8675		a2 00		ldx #$00	                ldx #0

.8677						L8677:
.8677		ad 72 fc	lda $fc72	                lda plus1_status
.867a		10 05		bpl $8681	                bpl L8681    ; taken if printer not busy
.867c		ca		dex		                dex
.867d		d0 f8		bne $8677	                bne L8677
.867f		f0 16		beq $8697	                beq L8697    ; JMP, in effect - printer didn't become ready quickly

.8681						L8681:
.8681		20 99 89	jsr $8999	                jsr remove_printer_buffer_char
.8684		8d 71 fc	sta $fc71	                sta plus1_printer
.8687		a9 00		lda #$00	                lda #0
.8689		8d 72 fc	sta $fc72	                sta plus1_status
.868c		a9 10		lda #$10	                lda #$10
.868e		8d 72 fc	sta $fc72	                sta plus1_status
.8691		68		pla		                pla
.8692		aa		tax		                tax
.8693		ca		dex		                dex
.8694		d0 d3		bne $8669	                bne L8669
.8696		48		pha		                pha

.8697						L8697:
.8697		68		pla		                pla
.8698		a9 40		lda #$40	                lda #$40
.869a		20 b7 89	jsr $89b7	                jsr set_poll_flag
.869d		18		clc		                clc
.869e		4c 50 8a	jmp $8a50	                jmp L8A50

						;-------------------------------------------------------------------------

.86a1						L86A1:
.86a1		a9 40		lda #$40	                lda #$40
.86a3		20 cb 89	jsr $89cb	                jsr clear_poll_flag
.86a6		38		sec		                sec
.86a7		4c 50 8a	jmp $8a50	                jmp L8A50

						;-------------------------------------------------------------------------

.86aa						L86AA:
.86aa		a9 40		lda #$40	                lda #$40
.86ac		4c b7 89	jmp $89b7	                jmp set_poll_flag
						                .endblock

						;-------------------------------------------------------------------------

.86af						poll_adc:       .block
.86af		ae 4c 02	ldx $024c	                ldx os_current_adc_channel
.86b2		f0 58		beq $870c	                beq L870C ; not currently sampling ADC
.86b4		2c 90 02	bit $0290	                bit os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.86b7		70 0d		bvs $86c6	                bvs L86C6    ; taken if 9-pin joysticks
.86b9		2c 72 fc	bit $fc72	                bit plus1_status
.86bc		70 4e		bvs $870c	                bvs L870C ; taken if ADC conversion not ended
.86be		ad 70 fc	lda $fc70	                lda plus1_adc   ; Read: 8-bit ADC result
						                                ; Write: ADC channel to convert (4 = ch1, 5 = ch2, etc.)
.86c1		9d fb 02	sta $02fb,x	                sta os_adc_msbs-1,x
.86c4		50 1d		bvc $86e3	                bvc L86E3    ; JMP, in effect

.86c6						L86C6:
.86c6		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.86c9		29 03		and #$03	                and #3          ; extract joystick interface
.86cb		a8		tay		                tay
.86cc		b9 21 82	lda $8221,y	                lda fred_offsets,y; offset of joystick I/O by joystick index
						                                  ; (see table on p6 of Elk Expansion manual)
.86cf		a8		tay		                tay
.86d0		b9 00 fc	lda $fc00,y	                lda $FC00,y     ; read joystick I/O - %...FRLDU
.86d3		e0 03		cpx #$03	                cpx #3
.86d5		f0 04		beq $86db	                beq L86DB    ; taken if Y axis of joystick 2
.86d7		e0 01		cpx #$01	                cpx #1
.86d9		d0 02		bne $86dd	                bne L86DD    ; taken if Y axis of joystick 1

.86db						L86DB:
.86db		4a		lsr a		                lsr a           ; %....FRLD
.86dc		4a		lsr a		                lsr a           ; %.....FRL
						; TODO: Hmm... is that right???

.86dd						L86DD:
.86dd		29 03		and #$03	                and #3
.86df		a8		tay		                tay
.86e0		b9 43 83	lda $8343,y	                lda adc_values_table,y

.86e3						L86E3:
.86e3		9d fb 02	sta $02fb,x	                sta os_adc_msbs-1,x
.86e6		a9 00		lda #$00	                lda #0
.86e8		9d f7 02	sta $02f7,x	                sta os_last_adc_channel,x
.86eb		8e f7 02	stx $02f7	                stx os_last_adc_channel
.86ee		a0 03		ldy #$03	                ldy #3          ; 3 = ADC conversion complete event
.86f0		20 bf ff	jsr $ffbf	                jsr oseven
.86f3		ae f7 02	ldx $02f7	                ldx os_last_adc_channel
.86f6		ca		dex		                dex
.86f7		d0 10		bne $8709	                bne L8709
.86f9		a0 bd		ldy #$bd	                ldy #$BD
.86fb		20 48 8a	jsr $8a48	                jsr read_os_variables; read max ADC channel number
.86fe		8a		txa		                txa
.86ff		d0 08		bne $8709	                bne L8709    ; taken if max ADC channel>0
						; disable ADC polling
.8701		a9 20		lda #$20	                lda #$20
.8703		20 cb 89	jsr $89cb	                jsr clear_poll_flag
.8706		4c 0c 87	jmp $870c	                jmp L870C

						;-------------------------------------------------------------------------

.8709						L8709:
.8709		20 0d 87	jsr $870d	                jsr start_next_adc_channel

.870c						L870C:
.870c		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.870d						start_next_adc_channel:.block
.870d		e0 05		cpx #$05	                cpx #5
.870f		90 02		bcc $8713	                bcc L8713
.8711		a2 04		ldx #$04	                ldx #4

.8713						L8713:
.8713		8e 4c 02	stx $024c	                stx os_current_adc_channel
.8716		8a		txa		                txa
.8717		f0 0b		beq $8724	                beq L8724
.8719		2c 90 02	bit $0290	                bit os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.871c		70 06		bvs $8724	                bvs L8724 ; taken if using 9-pin joysticks - don't actually start a conversion
.871e		bd 24 87	lda $8724,x	                lda plus1_adc_channel_values-1,x
.8721		8d 70 fc	sta $fc70	                sta plus1_adc   ; initiate ADC conversion

.8724						L8724:
.8724		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

>8725		04				plus1_adc_channel_values:.byte 4
						                ; EAUG p269
>8726		05				                .byte 5
>8727		06				                .byte 6
>8728		07				                .byte 7

						;-------------------------------------------------------------------------

.8729						L8729:       .block
.8729		ad 6a 0d	lda $0d6a	                lda serial_flags
.872c		29 02		and #$02	                and #2
.872e		f0 05		beq $8735	                beq L8735

.8730						L8730:
.8730		20 9f 89	jsr $899f	                jsr check_serial_input_buffer_free_space; Check if there's free space in the serial input buffer.
						                                                        ; Exit: C=1 if >=9 bytes free
.8733		b0 06		bcs $873b	                bcs L873B

.8735						L8735:
.8735		a9 01		lda #$01	                lda #1
.8737		8d 6f fc	sta $fc6f	                sta LFC6F
.873a		60		rts		                rts

						;-------------------------------------------------------------------------

.873b						L873B:
.873b		a9 01		lda #$01	                lda #1
.873d		8d 6e fc	sta $fc6e	                sta LFC6E
.8740		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8741						handle_osbyte_a3h:
.8741		a5 f0		lda $f0		                lda os_x        ; Disable/Enable printer and ADC
.8743		c9 80		cmp #$80	                cmp #$80
.8745		d0 0d		bne $8754	                bne L8754
.8747		a6 f1		ldx $f1		                ldx os_y        ; Y value for osbyte/osword
.8749		f0 0c		beq $8757	                beq L8757
.874b		ca		dex		                dex
.874c		f0 18		beq $8766	                beq L8766
.874e		ca		dex		                dex
.874f		f0 29		beq $877a	                beq L877A
.8751		ca		dex		                dex
.8752		f0 31		beq $8785	                beq L8785

.8754						L8754:
.8754		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.8757						L8757:
.8757		ad 68 0d	lda $0d68	                lda poll_flags
.875a		48		pha		                pha
.875b		29 fe		and #$fe	                and #$FE
.875d		8d 68 0d	sta $0d68	                sta poll_flags
.8760		20 26 8a	jsr $8a26	                jsr L8A26
.8763		4c 72 87	jmp $8772	                jmp L8772

						;-------------------------------------------------------------------------

.8766						L8766:
.8766		ad 68 0d	lda $0d68	                lda poll_flags
.8769		48		pha		                pha
.876a		09 01		ora #$01	                ora #1
.876c		8d 68 0d	sta $0d68	                sta poll_flags
.876f		20 05 8a	jsr $8a05	                jsr L8A05

.8772						L8772:
.8772		68		pla		                pla
.8773		29 01		and #$01	                and #1
.8775		85 f0		sta $f0		                sta os_x
.8777		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.877a						L877A:
.877a		ad 68 0d	lda $0d68	                lda poll_flags
.877d		29 fd		and #$fd	                and #$FD
.877f		8d 68 0d	sta $0d68	                sta poll_flags
.8782		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.8785						L8785:
.8785		ad 68 0d	lda $0d68	                lda poll_flags
.8788		09 02		ora #$02	                ora #2
.878a		8d 68 0d	sta $0d68	                sta poll_flags
.878d		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.8790						L8790:
.8790		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.8793						handle_osbyte_80h:
.8793		a5 f0		lda $f0		                lda os_x
.8795		d0 f9		bne $8790	                bne L8790
.8797		2c 90 02	bit $0290	                bit os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.879a		70 17		bvs $87b3	                bvs L87B3    ; taken if using 9-pin joysticks
.879c		ad 72 fc	lda $fc72	                lda plus1_status
.879f		48		pha		                pha
.87a0		10 03		bpl $87a5	                bpl L87A5
.87a2		20 3e 86	jsr $863e	                jsr L863E    ; printer not busy, so sneak in a quick printer update...

.87a5						L87A5:
.87a5		68		pla		                pla
.87a6		4a		lsr a		                lsr a
.87a7		4a		lsr a		                lsr a
.87a8		4a		lsr a		                lsr a
.87a9		4a		lsr a		                lsr a
.87aa		29 03		and #$03	                and #3
.87ac		49 03		eor #$03	                eor #3
.87ae		85 f0		sta $f0		                sta os_x
.87b0		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.87b3						L87B3:
.87b3		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.87b6		29 03		and #$03	                and #3
.87b8		a8		tay		                tay
.87b9		b9 21 82	lda $8221,y	                lda fred_offsets,y; offset of joystick I/O by joystick index
						                                  ; (see table on p6 of Elk Expansion manual)
.87bc		a8		tay		                tay
.87bd		b9 00 fc	lda $fc00,y	                lda $FC00,y     ; ? ....FRLDU
.87c0		a2 00		ldx #$00	                ldx #0
.87c2		6a		ror a		                ror a           ; U ?....FRLD
.87c3		6a		ror a		                ror a           ; D U?....FRL
.87c4		10 02		bpl $87c8	                bpl L87C8
.87c6		b0 05		bcs $87cd	                bcs L87CD

.87c8						L87C8:
.87c8		4a		lsr a		                lsr a
.87c9		4a		lsr a		                lsr a
.87ca		29 01		and #$01	                and #1
.87cc		aa		tax		                tax

.87cd						L87CD:
.87cd		86 f0		stx $f0		                stx os_x
.87cf		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.87d2						handle_osbyte_10h:
.87d2		a6 f0		ldx $f0		                ldx os_x        ; Select ADC channels which are to be sampled
.87d4		20 dc 87	jsr $87dc	                jsr set_adc_sampling_channels
.87d7		86 f0		stx $f0		                stx os_x
.87d9		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.87dc						set_adc_sampling_channels:.block
.87dc		8a		txa		                txa
.87dd		f0 0a		beq $87e9	                beq L87E9    ; taken if ADC sampling disabled
.87df		48		pha		                pha
.87e0		20 0d 87	jsr $870d	                jsr start_next_adc_channel
.87e3		a9 20		lda #$20	                lda #$20
.87e5		20 b7 89	jsr $89b7	                jsr set_poll_flag; indicate ADC polling required
.87e8		68		pla		                pla

.87e9						L87E9:
.87e9		aa		tax		                tax
.87ea		a0 bd		ldy #$bd	                ldy #$BD
.87ec		4c 43 8a	jmp $8a43	                jmp write_os_variable; write max ADC channel number
						                .endblock

						;-------------------------------------------------------------------------

.87ef						handle_osbyte_11h:
.87ef		a9 00		lda #$00	                lda #0          ; Force an ADC conversion
.87f1		8d f7 02	sta $02f7	                sta os_last_adc_channel
.87f4		a6 f0		ldx $f0		                ldx os_x
.87f6		20 0d 87	jsr $870d	                jsr start_next_adc_channel
.87f9		a9 20		lda #$20	                lda #$20        ; ' '
.87fb		20 b7 89	jsr $89b7	                jsr set_poll_flag; indicate ADC polling required
.87fe		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.8801						handle_osbyte_6eh:
.8801		a6 f0		ldx $f0		                ldx os_x        ; ????
.8803		ad 6b 0d	lda $0d6b	                lda L0D6B
.8806		8e 6b 0d	stx $0d6b	                stx L0D6B
.8809		8e 73 fc	stx $fc73	                stx LFC73
.880c		85 f0		sta $f0		                sta os_x
.880e		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.8811						svc_osbyte:
.8811		a5 ef		lda $ef		                lda os_a        ; A value for osbyte/osword
.8813		c9 80		cmp #$80	                cmp #$80
.8815		d0 03		bne $881a	                bne L881A
.8817		4c 93 87	jmp $8793	                jmp handle_osbyte_80h
.881a						L881A:
.881a		c9 10		cmp #$10	                cmp #$10
.881c		f0 b4		beq $87d2	                beq handle_osbyte_10h; Select ADC channels which are to be sampled
.881e		c9 11		cmp #$11	                cmp #$11
.8820		f0 cd		beq $87ef	                beq handle_osbyte_11h; Force an ADC conversion
.8822		c9 07		cmp #$07	                cmp #7
.8824		f0 1a		beq $8840	                beq handle_osbyte_07h; Set RS423 baud rate for receiving data
.8826		c9 08		cmp #$08	                cmp #8
.8828		f0 1d		beq $8847	                beq handle_osbyte_08h; Set RS423 baud rate for sending data
.882a		c9 9c		cmp #$9c	                cmp #$9C
.882c		f0 65		beq $8893	                beq handle_osbyte_9ch; Read/update 6850 ACIA control register and OS copy
.882e		c9 02		cmp #$02	                cmp #2
.8830		f0 38		beq $886a	                beq handle_osbyte_02h; Select input stream
.8832		c9 6e		cmp #$6e	                cmp #$6E
.8834		f0 cb		beq $8801	                beq handle_osbyte_6eh; ????
.8836		c9 a3		cmp #$a3	                cmp #$A3
.8838		d0 03		bne $883d	                bne svc_osbyte_done
.883a		4c 41 87	jmp $8741	                jmp handle_osbyte_a3h; Disable/Enable printer and ADC
.883d						svc_osbyte_done:
.883d		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.8840						handle_osbyte_07h:
.8840		a9 f0		lda #$f0	                lda #$F0        ; Set RS423 baud rate for receiving data
.8842		85 f1		sta $f1		                sta os_y        ; Y value for osbyte/osword
.8844		4c 4b 88	jmp $884b	                jmp set_serial_baud_rate

						;-------------------------------------------------------------------------

.8847						handle_osbyte_08h:
.8847		a9 0f		lda #$0f	                lda #$F         ; Set RS423 baud rate for sending data
.8849		85 f1		sta $f1		                sta os_y        ; Y value for osbyte/osword

.884b						set_serial_baud_rate:
.884b		a6 f0		ldx $f0		                ldx os_x        ; X = baud rate index
.884d		e0 0c		cpx #$0c	                cpx #$C
.884f		b0 16		bcs $8867	                bcs L8867    ; taken if invalid baud rate index
.8851		a5 f1		lda $f1		                lda os_y        ; get mask
.8853		49 ff		eor #$ff	                eor #$FF        ; 0fh = receiving
						                                ; f0h = sending
.8855		2d 69 0d	and $0d69	                and serial_baud_rates; discard uninteresting bits
.8858		85 f0		sta $f0		                sta os_x
.885a		bd 0f 89	lda $890f,x	                lda baud_rates_by_index,x
.885d		25 f1		and $f1		                and os_y        ; Y value for osbyte/osword
.885f		05 f0		ora $f0		                ora os_x
.8861		8d 69 0d	sta $0d69	                sta serial_baud_rates
.8864		8d 61 fc	sta $fc61	                sta xhw_serial_baud_rates

.8867						L8867:
.8867		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.886a						handle_osbyte_02h:
.886a		a5 f0		lda $f0		                lda os_x        ; Select input stream
.886c		48		pha		                pha             ; save input device flags
.886d		29 01		and #$01	                and #1
.886f		aa		tax		                tax
.8870		a0 b1		ldy #$b1	                ldy #$B1
.8872		20 43 8a	jsr $8a43	                jsr write_os_variable; write input source flags
.8875		68		pla		                pla                  ; restore input device flags
.8876		f0 56		beq $88ce	                beq L88CE         ; taken if keyboard on/serial off
						; serial enabled
.8878		a9 01		lda #$01	                lda #1
.887a		8d 62 fc	sta $fc62	                sta LFC62
.887d		ad 6a 0d	lda $0d6a	                lda serial_flags
.8880		09 02		ora #$02	                ora #2
.8882		8d 6a 0d	sta $0d6a	                sta serial_flags
.8885		8d 65 fc	sta $fc65	                sta LFC65
.8888		20 29 87	jsr $8729	                jsr L8729
.888b		a9 10		lda #$10	                lda #$10
.888d		20 b7 89	jsr $89b7	                jsr set_poll_flag
.8890		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.8893						handle_osbyte_9ch:
.8893		a9 e3		lda #$e3	                lda #$E3        ; RIE|TxCtrl|CtrDiv
.8895		c5 f1		cmp $f1		                cmp os_y        ; Y value for osbyte/osword
.8897		d0 56		bne $88ef	                bne L88EF
						; Handle mask $e3 (%11100011): RIE, TxCtrl, CtrlDiv
						; The value being set is the WordSelect field
						; Don't allow the EOR value to affect any of the non-WordSelect bits.
.8899		24 f0		bit $f0		                bit os_x
.889b		d0 2e		bne $88cb	                bne L88CB
.889d		a5 f0		lda $f0		                lda os_x        ; Get value, %000www00
.889f		4a		lsr a		                lsr a           ; %0000www0
.88a0		4a		lsr a		                lsr a           ; %00000www
.88a1		ea		nop		                nop
.88a2		aa		tax		                tax
.88a3		20 66 89	jsr $8966	                jsr write_10h_to_fc62
.88a6		ad 60 fc	lda $fc60	                lda LFC60
.88a9		29 e0		and #$e0	                and #%11100000
.88ab		85 f1		sta $f1		                sta os_y        ; Y value for osbyte/osword
.88ad		20 66 89	jsr $8966	                jsr write_10h_to_fc62
.88b0		bd 1b 89	lda $891b,x	                lda L891B,x
.88b3		29 1f		and #$1f	                and #$1F
.88b5		05 f1		ora $f1		                ora os_y        ; Y value for osbyte/osword
.88b7		8d 60 fc	sta $fc60	                sta LFC60
.88ba		ad 60 fc	lda $fc60	                lda LFC60
.88bd		29 f0		and #$f0	                and #$F0
.88bf		bc 1b 89	ldy $891b,x	                ldy L891B,x
.88c2		30 02		bmi $88c6	                bmi L88C6
.88c4		09 0f		ora #$0f	                ora #$F

.88c6						L88C6:
.88c6		09 07		ora #$07	                ora #7
.88c8		8d 60 fc	sta $fc60	                sta LFC60

.88cb						L88CB:
.88cb		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.88ce						L88CE:
.88ce		a9 02		lda #$02	                lda #2
.88d0		8d 62 fc	sta $fc62	                sta LFC62
.88d3		20 54 89	jsr $8954	                jsr write_20h_to_fc62
.88d6		20 60 89	jsr $8960	                jsr write_40h_to_fc62
.88d9		ad 6a 0d	lda $0d6a	                lda serial_flags
.88dc		29 fd		and #$fd	                and #$FD
.88de		8d 6a 0d	sta $0d6a	                sta serial_flags
.88e1		8d 65 fc	sta $fc65	                sta LFC65
.88e4		20 29 87	jsr $8729	                jsr L8729
.88e7		a9 10		lda #$10	                lda #$10
.88e9		20 cb 89	jsr $89cb	                jsr clear_poll_flag
.88ec		4c 8c 80	jmp $808c	                jmp svc_claimed

						;-------------------------------------------------------------------------

.88ef						L88EF:
.88ef		a9 9f		lda #$9f	                lda #$9F
.88f1		c5 f1		cmp $f1		                cmp os_y        ; Y value for osbyte/osword
.88f3		d0 d6		bne $88cb	                bne L88CB
						; Handle mask $9f (%10011111): RIE, WordSelect, CtrlDiv
						; The value being set is TxCtrl.
						; Don't allow the EOR value to affect any of the non-TxCtrl bits.
.88f5		24 f0		bit $f0		                bit os_x
.88f7		d0 d2		bne $88cb	                bne L88CB
.88f9		a5 f0		lda $f0		                lda os_x
.88fb		c9 60		cmp #$60	                cmp #$60        ; %.11..... = reset
.88fd		f0 08		beq $8907	                beq L8907    ; taken if reset
.88ff		a9 70		lda #$70	                lda #$70
.8901		8d 62 fc	sta $fc62	                sta LFC62
.8904		4c cb 88	jmp $88cb	                jmp L88CB

						;-------------------------------------------------------------------------

.8907						L8907:
.8907		a9 64		lda #$64	                lda #$64
.8909		8d 62 fc	sta $fc62	                sta LFC62
.890c		4c cb 88	jmp $88cb	                jmp L88CB

						;-------------------------------------------------------------------------

>890f		bb				baud_rates_by_index:.byte $BB
>8910		00				                .byte 0
>8911		33				                .byte $33
>8912		44				                .byte $44
>8913		66				                .byte $66
>8914		88				                .byte $88
>8915		99				                .byte $99
>8916		bb				                .byte $BB
>8917		cc				                .byte $CC
>8918		11				                .byte $11
>8919		55				                .byte $55
>891a		aa				                .byte $AA
>891b		02				L891B:      .byte %00000010
>891c		06				                .byte %00000110
>891d		82				                .byte %10000010
>891e		86				                .byte %10000110
>891f		13				                .byte %00010011
>8920		93				                .byte %10010011
>8921		83				                .byte %10000011
>8922		87				                .byte %10000111

						;-------------------------------------------------------------------------

						; Reset serial hardware
						; Entry: C=0 if soft BREAK, C=1 if hard BREAK/power on

.8923						reset_serial:   .block
.8923		20 66 89	jsr $8966	                jsr write_10h_to_fc62
.8926		a9 93		lda #$93	                lda #$93
.8928		8d 60 fc	sta $fc60	                sta LFC60
.892b		a9 07		lda #$07	                lda #7
.892d		8d 60 fc	sta $fc60	                sta LFC60
.8930		a9 8f		lda #$8f	                lda #$8F
.8932		8d 64 fc	sta $fc64	                sta LFC64
.8935		ad 69 0d	lda $0d69	                lda serial_baud_rates
.8938		90 02		bcc $893c	                bcc L893C
.893a		a9 bb		lda #$bb	                lda #$BB

.893c						L893C:
.893c		8d 69 0d	sta $0d69	                sta serial_baud_rates
.893f		8d 61 fc	sta $fc61	                sta xhw_serial_baud_rates
.8942		20 54 89	jsr $8954	                jsr write_20h_to_fc62
.8945		20 5a 89	jsr $895a	                jsr write_30h_to_fc62
.8948		20 60 89	jsr $8960	                jsr write_40h_to_fc62
.894b		a9 80		lda #$80	                lda #$80
.894d		8d 6a 0d	sta $0d6a	                sta serial_flags
.8950		8d 65 fc	sta $fc65	                sta LFC65
.8953		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8954						write_20h_to_fc62:.block
.8954		a9 20		lda #$20	                lda #$20
.8956		8d 62 fc	sta $fc62	                sta LFC62
.8959		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.895a						write_30h_to_fc62:.block
.895a		a9 30		lda #$30	                lda #$30
.895c		8d 62 fc	sta $fc62	                sta LFC62
.895f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8960						write_40h_to_fc62:.block
.8960		a9 40		lda #$40	                lda #$40
.8962		8d 62 fc	sta $fc62	                sta LFC62
.8965		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8966						write_10h_to_fc62:.block
.8966		a9 10		lda #$10	                lda #$10
.8968		8d 62 fc	sta $fc62	                sta LFC62
.896b		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.896c						L896C:       .block
.896c		ad 6a 0d	lda $0d6a	                lda serial_flags
.896f		09 01		ora #$01	                ora #1
.8971		8d 6a 0d	sta $0d6a	                sta serial_flags
.8974		8d 65 fc	sta $fc65	                sta LFC65
.8977		a9 04		lda #$04	                lda #4
.8979		8d 62 fc	sta $fc62	                sta LFC62
.897c		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.897d						L897D:       .block
.897d		ad 6a 0d	lda $0d6a	                lda serial_flags
.8980		29 fe		and #$fe	                and #$FE
.8982		8d 6a 0d	sta $0d6a	                sta serial_flags
.8985		8d 65 fc	sta $fc65	                sta LFC65
.8988		a9 08		lda #$08	                lda #8
.898a		8d 62 fc	sta $fc62	                sta LFC62
.898d		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.898e						L898E:       .block
.898e		a2 01		ldx #$01	                ldx #1
.8990		6c 2a 02	jmp ($022a)	                jmp (insv)
						                .endblock

						;-------------------------------------------------------------------------

.8993						L8993:       .block
.8993		b8		clv		                clv
.8994		a2 02		ldx #$02	                ldx #2
.8996		6c 2c 02	jmp ($022c)	                jmp (remv)
						                .endblock

						;-------------------------------------------------------------------------

.8999						remove_printer_buffer_char:.block
.8999		b8		clv		                clv             ; V=0 to remove value
.899a		a2 03		ldx #$03	                ldx #3          ; Printer buffer
.899c		6c 2c 02	jmp ($022c)	                jmp (remv)
						                .endblock

						;-------------------------------------------------------------------------

						; Check if there's free space in the serial input buffer.
						; Exit: C=1 if >=9 bytes free

.899f						check_serial_input_buffer_free_space:.block
.899f		20 b0 89	jsr $89b0	                jsr get_serial_input_buffer_free_space
.89a2		c0 01		cpy #$01	                cpy #1
.89a4		b0 02		bcs $89a8	                bcs L89A8 ; taken if buffer free >=256
.89a6		e0 09		cpx #$09	                cpx #9

.89a8						L89A8:
.89a8		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.89a9						get_printer_buffer_contents_size:.block
.89a9		a2 03		ldx #$03	                ldx #3          ; Printer buffer
.89ab		18		clc		                clc             ; C=0 - get length of buffer contents
.89ac		b8		clv		                clv             ; V=0 - count, not purge
.89ad		6c 2e 02	jmp ($022e)	                jmp (cnpv)
						                .endblock

						;-------------------------------------------------------------------------

.89b0						get_serial_input_buffer_free_space:.block
.89b0		a2 01		ldx #$01	                ldx #1          ; serial input buffer
.89b2		38		sec		                sec             ; C=1 - get buffer free space
.89b3		b8		clv		                clv             ; V=0 - count, not purge
.89b4		6c 2e 02	jmp ($022e)	                jmp (cnpv)
						                .endblock

						;-------------------------------------------------------------------------

.89b7						set_poll_flag:  .block
.89b7		0d 68 0d	ora $0d68	                ora poll_flags
.89ba		ae 68 0d	ldx $0d68	                ldx poll_flags
.89bd		8d 68 0d	sta $0d68	                sta poll_flags
.89c0		8a		txa		                txa
.89c1		29 f0		and #$f0	                and #$F0
.89c3		d0 05		bne $89ca	                bne L89CA

.89c5						increment_polling_semaphore:
.89c5		a9 16		lda #$16	                lda #$16        ; increment paged ROM polling semaphore
						                                ; (EAUG p35)
.89c7		20 f4 ff	jsr $fff4	                jsr osbyte

.89ca						L89CA:
.89ca		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.89cb						clear_poll_flag:.block
.89cb		aa		tax		                tax
.89cc		a9 f0		lda #$f0	                lda #$F0
.89ce		2c 68 0d	bit $0d68	                bit poll_flags
.89d1		f0 12		beq $89e5	                beq decrement_polling_semaphore.L89E5
.89d3		8a		txa		                txa
.89d4		49 ff		eor #$ff	                eor #$FF
.89d6		2d 68 0d	and $0d68	                and poll_flags
.89d9		8d 68 0d	sta $0d68	                sta poll_flags
.89dc		29 f0		and #$f0	                and #$F0
.89de		d0 05		bne $89e5	                bne decrement_polling_semaphore.L89E5
						                .endblock

						;-------------------------------------------------------------------------

.89e0						decrement_polling_semaphore:.block
.89e0		a9 17		lda #$17	                lda #$17        ; decrement paged ROM polling semaphore
						                                ; (EAUG p35)
.89e2		20 f4 ff	jsr $fff4	                jsr osbyte

.89e5						L89E5:
.89e5		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.89e6						svc_brk:
.89e6		a9 01		lda #$01	                lda #1
.89e8		2c 68 0d	bit $0d68	                bit poll_flags
.89eb		d0 15		bne $8a02	                bne L8A02    ; taken if poll_flags bit 0 set
						; call 8a26, saving/restoring the OSBYTE values
.89ed		a5 ef		lda $ef		                lda os_a        ; A value for osbyte/osword
.89ef		48		pha		                pha
.89f0		a5 f0		lda $f0		                lda os_x
.89f2		48		pha		                pha
.89f3		a5 f1		lda $f1		                lda os_y        ; Y value for osbyte/osword
.89f5		48		pha		                pha
.89f6		20 26 8a	jsr $8a26	                jsr L8A26
.89f9		68		pla		                pla
.89fa		85 f1		sta $f1		                sta os_y        ; Y value for osbyte/osword
.89fc		68		pla		                pla
.89fd		85 f0		sta $f0		                sta os_x
.89ff		68		pla		                pla
.8a00		85 ef		sta $ef		                sta os_a        ; A value for osbyte/osword

.8a02						L8A02:
.8a02		4c 87 80	jmp $8087	                jmp svc_nop

						;-------------------------------------------------------------------------

.8a05						L8A05:       .block
.8a05		48		pha		                pha
.8a06		8a		txa		                txa
.8a07		48		pha		                pha
.8a08		98		tya		                tya
.8a09		48		pha		                pha
.8a0a		ad 68 0d	lda $0d68	                lda poll_flags
.8a0d		30 11		bmi $8a20	                bmi L8A20
.8a0f		48		pha		                pha
.8a10		09 80		ora #$80	                ora #$80
.8a12		8d 68 0d	sta $0d68	                sta poll_flags
.8a15		68		pla		                pla
.8a16		f0 08		beq $8a20	                beq L8A20
.8a18		20 e0 89	jsr $89e0	                jsr decrement_polling_semaphore
.8a1b		a9 01		lda #$01	                lda #1
.8a1d		8d 6f fc	sta $fc6f	                sta LFC6F

.8a20						L8A20:
.8a20		68		pla		                pla
.8a21		a8		tay		                tay
.8a22		68		pla		                pla
.8a23		aa		tax		                tax
.8a24		68		pla		                pla
.8a25		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8a26						L8A26:       .block
.8a26		48		pha		                pha
.8a27		8a		txa		                txa
.8a28		48		pha		                pha
.8a29		98		tya		                tya
.8a2a		48		pha		                pha
.8a2b		ad 68 0d	lda $0d68	                lda poll_flags
.8a2e		10 0d		bpl $8a3d	                bpl L8A3D    ; taken if bit 7 clear
.8a30		29 7f		and #$7f	                and #$7F
.8a32		8d 68 0d	sta $0d68	                sta poll_flags
.8a35		f0 06		beq $8a3d	                beq L8A3D    ; taken if all poll flags now 0
.8a37		20 c5 89	jsr $89c5	                jsr set_poll_flag.increment_polling_semaphore
.8a3a		20 29 87	jsr $8729	                jsr L8729

.8a3d						L8A3D:
.8a3d		68		pla		                pla
.8a3e		a8		tay		                tay
.8a3f		68		pla		                pla
.8a40		aa		tax		                tax
.8a41		68		pla		                pla
.8a42		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Write OS variable.
						; Entry: Y = variable index, same as higher-numbered OSBYTEs
						;        X = value to write

.8a43						write_os_variable:.block
.8a43		8a		txa		                txa
.8a44		99 90 01	sta $0190,y	                sta $190,y
.8a47		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Read OS variables.
						; Entry: Y = variable index, same as higher-numbered OSBYTEs
						; Exit:  X = value of variable
						;        Y = value of following variable

.8a48						read_os_variables:.block
.8a48		be 90 01	ldx $0190,y	                ldx $190,y
.8a4b		b9 91 01	lda $0191,y	                lda $191,y
.8a4e		a8		tay		                tay
.8a4f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8a50						L8A50:       .block
.8a50		6e c6 02	ror $02c6	                ror os_buffer_busy_flags+3; indicate printer buffer is busy
.8a53		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8a54						L8A54:
.8a54		8e 54 01	stx $0154	                stx L0154
.8a57		a4 a8		ldy $a8		                ldy L00A8
.8a59		4c 50 01	jmp $0150	                jmp L0150

						;-------------------------------------------------------------------------

.8a5c		48		pha		                pha
.8a5d		8e 54 01	stx $0154	                stx L0154
.8a60		a4 a8		ldy $a8		                ldy L00A8
.8a62		20 4e 01	jsr $014e	                jsr L014E
.8a65		68		pla		                pla
.8a66		91 f6		sta ($f6),y	                sta ($F6),y
.8a68		a0 00		ldy #$00	                ldy #0
.8a6a		84 f4		sty $f4		                sty L00F4
.8a6c		20 b9 ff	jsr $ffb9	                jsr osrdsc
.8a6f		a2 00		ldx #$00	                ldx #0
.8a71		60		rts		                rts

						;-------------------------------------------------------------------------

.8a72						embedded_pbuf_rom: .block
						                .logical $8000
>8a72	8000	00				                .byte 0
>8a73	8001	00				                .byte 0
>8a74	8002	00				                .byte 0

						;-------------------------------------------------------------------------

.8a75	8003	4c 36 80	jmp $8036	                jmp L8036

						;-------------------------------------------------------------------------

>8a78	8006	82				                .byte $82       ; ROM type
>8a79	8007	12				                .byte <pbuf_copyright
>8a7a	8008	10				                .byte $10
>8a7b	8009	50 42 55 46			                .text "PBUF"
>8a7f	800d	00				                .byte 0
>8a80	800e	31 2e 30 30			                .text "1.00"
.8a84	8012					pbuf_copyright:
>8a84	8012	00				                .byte 0
>8a85	8013	28 43 29 20 53 6c 6f 67		                .text "(C) Slogger 1986"
>8a8d	801b	67 65 72 20 31 39 38 36
>8a95	8023	00				                .byte 0
>8a96	8024	ff				                .byte $FF
.8a97	8025					header_end:
>8a97	8025	ae 80				L8025:       .word L80AE
>8a99	8027	ea 80				                .word L80EA
>8a9b	8029	3c 81				L8029:       .word L813C
>8a9d	802b	00 00				L802B:      .word 0
>8a9f	802d	00 00				L802D:      .word 0
>8aa1	802f	00 00				L802F:      .word 0
>8aa3	8031	00				L8031:      .byte 0
>8aa4	8032	00				L8032:      .byte 0
>8aa5	8033	a0				L8033:      .byte $A0
>8aa6	8034	73				L8034:      .byte $73
>8aa7	8035	1e				L8035:      .byte $1E

						;-------------------------------------------------------------------------

.8aa8	8036					L8036:
.8aa8	8036	c9 01		cmp #$01	                cmp #1
.8aaa	8038	d0 52		bne $808c	                bne L808C
.8aac	803a	48		pha		                pha
.8aad	803b	8a		txa		                txa
.8aae	803c	48		pha		                pha
.8aaf	803d	98		tya		                tya
.8ab0	803e	48		pha		                pha
.8ab1	803f	a9 a8		lda #$a8	                lda #168
.8ab3	8041	a2 00		ldx #$00	                ldx #0
.8ab5	8043	a0 ff		ldy #$ff	                ldy #$FF
.8ab7	8045	20 f4 ff	jsr $fff4	                jsr osbyte
.8aba	8048	86 a8		stx $a8		                stx L00A8
.8abc	804a	84 a9		sty $a9		                sty L00A8+1
.8abe	804c	a2 00		ldx #$00	                ldx #0
.8ac0	804e	a0 3f		ldy #$3f	                ldy #$3F

.8ac2	8050					L8050:
.8ac2	8050	bd 25 80	lda $8025,x	                lda L8025,x
.8ac5	8053	91 a8		sta ($a8),y	                sta (L00A8),y
.8ac7	8055	c8		iny		                iny
.8ac8	8056	bd 26 80	lda $8026,x	                lda L8025+1,x
.8acb	8059	91 a8		sta ($a8),y	                sta (L00A8),y
.8acd	805b	c8		iny		                iny
.8ace	805c	a5 f4		lda $f4		                lda $f4
.8ad0	805e	91 a8		sta ($a8),y	                sta (L00A8),y
.8ad2	8060	c8		iny		                iny
.8ad3	8061	e8		inx		                inx
.8ad4	8062	e8		inx		                inx
.8ad5	8063	e0 06		cpx #$06	                cpx #6
.8ad7	8065	d0 e9		bne $8050	                bne L8050

.8ad9	8067					L8067:
.8ad9	8067	bd 29 02	lda $0229,x	                lda insv-1,x
.8adc	806a	9d 2a 80	sta $802a,x	                sta L802B-1,x
.8adf	806d	ca		dex		                dex
.8ae0	806e	d0 f7		bne $8067	                bne L8067
.8ae2	8070	a9 3f		lda #$3f	                lda #$3F
.8ae4	8072	8d 2a 02	sta $022a	                sta insv+0
.8ae7	8075	a9 42		lda #$42	                lda #$42
.8ae9	8077	8d 2c 02	sta $022c	                sta remv+0
.8aec	807a	a9 45		lda #$45	                lda #$45
.8aee	807c	8d 2e 02	sta $022e	                sta cnpv+0
.8af1	807f	a9 ff		lda #$ff	                lda #$FF
.8af3	8081	8d 2b 02	sta $022b	                sta insv+1
.8af6	8084	8d 2d 02	sta $022d	                sta remv+1
.8af9	8087	8d 2f 02	sta $022f	                sta cnpv+1
.8afc	808a	d0 1c		bne $80a8	                bne L80A8

.8afe	808c					L808C:
.8afe	808c	c9 03		cmp #$03	                cmp #3
.8b00	808e	d0 1d		bne $80ad	                bne L80AD
.8b02	8090	48		pha		                pha
.8b03	8091	8a		txa		                txa
.8b04	8092	48		pha		                pha
.8b05	8093	98		tya		                tya
.8b06	8094	48		pha		                pha
.8b07	8095	20 7e 81	jsr $817e	                jsr L817E
.8b0a	8098	d0 05		bne $809f	                bne L809F
.8b0c	809a	ad 31 80	lda $8031	                lda L8031
.8b0f	809d	f0 09		beq $80a8	                beq L80A8

.8b11	809f					L809F:
.8b11	809f	a9 8f		lda #$8f	                lda #143
.8b13	80a1	a2 14		ldx #$14	                ldx #$14
.8b15	80a3	a0 00		ldy #$00	                ldy #0
.8b17	80a5	20 f4 ff	jsr $fff4	                jsr osbyte

.8b1a	80a8					L80A8:
.8b1a	80a8	68		pla		                pla
.8b1b	80a9	a8		tay		                tay
.8b1c	80aa	68		pla		                pla
.8b1d	80ab	aa		tax		                tax
.8b1e	80ac	68		pla		                pla

.8b1f	80ad					L80AD:
.8b1f	80ad	60		rts		                rts

						;-------------------------------------------------------------------------

.8b20	80ae					L80AE:
.8b20	80ae	e0 03		cpx #$03	                cpx #3
.8b22	80b0	f0 03		beq $80b5	                beq L80B5
.8b24	80b2	6c 2b 80	jmp ($802b)	                jmp (L802B)

						;-------------------------------------------------------------------------

.8b27	80b5					L80B5:
.8b27	80b5	2c 31 80	bit $8031	                bit L8031
.8b2a	80b8	10 02		bpl $80bc	                bpl L80BC
.8b2c	80ba	38		sec		                sec
.8b2d	80bb	60		rts		                rts

						;-------------------------------------------------------------------------

.8b2e	80bc					L80BC:
.8b2e	80bc	08		php		                php
.8b2f	80bd	78		sei		                sei

.8b30	80be					L80BE:
.8b30	80be	8d 8d 81	sta $818d	                sta L818D
.8b33	80c1	48		pha		                pha
.8b34	80c2	ee bf 80	inc $80bf	                inc L80BE+1
.8b37	80c5	d0 13		bne $80da	                bne L80DA
.8b39	80c7	ae c0 80	ldx $80c0	                ldx L80BE+2
.8b3c	80ca	e8		inx		                inx
.8b3d	80cb	ec 33 80	cpx $8033	                cpx L8033
.8b40	80ce	d0 07		bne $80d7	                bne L80D7
.8b42	80d0	a9 8d		lda #$8d	                lda #<L818D
.8b44	80d2	8d bf 80	sta $80bf	                sta L80BE+1
.8b47	80d5	a2 81		ldx #$81	                ldx #>L818D

.8b49	80d7					L80D7:
.8b49	80d7	8e c0 80	stx $80c0	                stx L80BE+2

.8b4c	80da					L80DA:
.8b4c	80da	20 7e 81	jsr $817e	                jsr L817E
.8b4f	80dd	d0 05		bne $80e4	                bne L80E4
.8b51	80df	a9 80		lda #$80	                lda #$80
.8b53	80e1	8d 31 80	sta $8031	                sta L8031

.8b56	80e4					L80E4:
.8b56	80e4	a2 03		ldx #$03	                ldx #3
.8b58	80e6	68		pla		                pla
.8b59	80e7	28		plp		                plp
.8b5a	80e8	18		clc		                clc
.8b5b	80e9	60		rts		                rts

						;-------------------------------------------------------------------------

.8b5c	80ea					L80EA:
.8b5c	80ea	e0 03		cpx #$03	                cpx #3
.8b5e	80ec	f0 03		beq $80f1	                beq L80F1
.8b60	80ee	6c 2d 80	jmp ($802d)	                jmp (L802D)

						;-------------------------------------------------------------------------

.8b63	80f1					L80F1:
.8b63	80f1	08		php		                php
.8b64	80f2	78		sei		                sei
.8b65	80f3	08		php		                php
.8b66	80f4	2c 32 80	bit $8032	                bit L8032
.8b69	80f7	30 3f		bmi $8138	                bmi L8138
.8b6b	80f9	20 7e 81	jsr $817e	                jsr L817E
.8b6e	80fc	d0 05		bne $8103	                bne L8103
.8b70	80fe	2c 31 80	bit $8031	                bit L8031
.8b73	8101	10 35		bpl $8138	                bpl L8138

.8b75	8103					L8103:
.8b75	8103	ad 8d 81	lda $818d	                lda L818D
.8b78	8106	28		plp		                plp
.8b79	8107	70 2a		bvs $8133	                bvs L8133
.8b7b	8109	48		pha		                pha
.8b7c	810a	ee 04 81	inc $8104	                inc L8103+1
.8b7f	810d	d0 13		bne $8122	                bne L8122
.8b81	810f	ae 05 81	ldx $8105	                ldx L8103+2
.8b84	8112	e8		inx		                inx
.8b85	8113	ec 33 80	cpx $8033	                cpx L8033
.8b88	8116	d0 07		bne $811f	                bne L811F
.8b8a	8118	a9 8d		lda #$8d	                lda #<L818D
.8b8c	811a	8d 04 81	sta $8104	                sta L8103+1
.8b8f	811d	a2 81		ldx #$81	                ldx #>L818D

.8b91	811f					L811F:
.8b91	811f	8e 05 81	stx $8105	                stx L8103+2

.8b94	8122					L8122:
.8b94	8122	20 7e 81	jsr $817e	                jsr L817E
.8b97	8125	d0 05		bne $812c	                bne L812C
.8b99	8127	a0 00		ldy #$00	                ldy #0
.8b9b	8129	20 bf ff	jsr $ffbf	                jsr oseven

.8b9e	812c					L812C:
.8b9e	812c	a9 00		lda #$00	                lda #0
.8ba0	812e	8d 31 80	sta $8031	                sta L8031
.8ba3	8131	68		pla		                pla
.8ba4	8132	a8		tay		                tay

.8ba5	8133					L8133:
.8ba5	8133	28		plp		                plp
.8ba6	8134	a2 03		ldx #$03	                ldx #3
.8ba8	8136	18		clc		                clc
.8ba9	8137	60		rts		                rts

						;-------------------------------------------------------------------------

.8baa	8138					L8138:
.8baa	8138	28		plp		                plp
.8bab	8139	28		plp		                plp
.8bac	813a	38		sec		                sec
.8bad	813b	60		rts		                rts

						;-------------------------------------------------------------------------

.8bae	813c					L813C:
.8bae	813c	08		php		                php
.8baf	813d	e0 03		cpx #$03	                cpx #3
.8bb1	813f	f0 04		beq $8145	                beq L8145
.8bb3	8141	28		plp		                plp
.8bb4	8142	6c 2f 80	jmp ($802f)	                jmp (L802F)

						;-------------------------------------------------------------------------

.8bb7	8145					L8145:
.8bb7	8145	28		plp		                plp
.8bb8	8146	50 01		bvc $8149	                bvc L8149
.8bba	8148	60		rts		                rts

						;-------------------------------------------------------------------------

.8bbb	8149					L8149:
.8bbb	8149	08		php		                php
.8bbc	814a	38		sec		                sec
.8bbd	814b	ad bf 80	lda $80bf	                lda L80BE+1
.8bc0	814e	ed 04 81	sbc $8104	                sbc L8103+1
.8bc3	8151	aa		tax		                tax
.8bc4	8152	ad c0 80	lda $80c0	                lda L80BE+2
.8bc7	8155	ed 05 81	sbc $8105	                sbc L8103+2
.8bca	8158	a8		tay		                tay
.8bcb	8159	b0 0a		bcs $8165	                bcs L8165
.8bcd	815b	8a		txa		                txa
.8bce	815c	6d 34 80	adc $8034	                adc L8034
.8bd1	815f	aa		tax		                tax
.8bd2	8160	98		tya		                tya
.8bd3	8161	6d 35 80	adc $8035	                adc L8035
.8bd6	8164	a8		tay		                tay

.8bd7	8165					L8165:
.8bd7	8165	28		plp		                plp
.8bd8	8166	08		php		                php
.8bd9	8167	90 13		bcc $817c	                bcc L817C
.8bdb	8169	8e 74 81	stx $8174	                stx L8173+1
.8bde	816c	8c 7a 81	sty $817a	                sty L8179+1
.8be1	816f	38		sec		                sec
.8be2	8170	ad 34 80	lda $8034	                lda L8034

.8be5	8173					L8173:
.8be5	8173	e9 00		sbc #$00	                sbc #0
.8be7	8175	aa		tax		                tax
.8be8	8176	ad 35 80	lda $8035	                lda L8035

.8beb	8179					L8179:
.8beb	8179	e9 00		sbc #$00	                sbc #0
.8bed	817b	a8		tay		                tay

.8bee	817c					L817C:
.8bee	817c	28		plp		                plp
.8bef	817d	60		rts		                rts

						;-------------------------------------------------------------------------

.8bf0	817e					L817E:       .block
.8bf0	817e	ad bf 80	lda $80bf	                lda L80BE+1
.8bf3	8181	cd 04 81	cmp $8104	                cmp L8103+1
.8bf6	8184	d0 06		bne $818c	                bne L818C
.8bf8	8186	ad c0 80	lda $80c0	                lda L80BE+2
.8bfb	8189	cd 05 81	cmp $8105	                cmp L8103+2

.8bfe	818c					L818C:
.8bfe	818c	60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8bff	818d					L818D:
						                .endlogical
						                .endblock

						;-------------------------------------------------------------------------

.8bff						L8BFF:       .block
.8bff		a2 1d		ldx #$1d	                ldx #$1D

.8c01						L8C01:
.8c01		bd 54 8a	lda $8a54,x	                lda L8A54,x
.8c04		9d 38 01	sta $0138,x	                sta L0138,x
.8c07		ca		dex		                dex
.8c08		10 f7		bpl $8c01	                bpl L8C01
.8c0a		a5 f4		lda $f4		                lda L00F4
.8c0c		8d 4d 01	sta $014d	                sta L014D
.8c0f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8c10						cmd_buffer:
.8c10		90 1d		bcc $8c2f	                bcc L8C2F
.8c12		20 44 85	jsr $8544	                jsr L8544
.8c15		a0 00		ldy #$00	                ldy #0

.8c17						L8C17:
.8c17		b9 7f 94	lda $947f,y	                lda asc_947F,y  ; "ON"
.8c1a		f0 12		beq $8c2e	                beq L8C2E
.8c1c		20 44 85	jsr $8544	                jsr L8544

.8c1f						L8C1F:
.8c1f		b9 7f 94	lda $947f,y	                lda asc_947F,y  ; "ON"
.8c22		30 06		bmi $8c2a	                bmi L8C2A
.8c24		20 ee ff	jsr $ffee	                jsr oswrch
.8c27		c8		iny		                iny
.8c28		d0 f5		bne $8c1f	                bne L8C1F

.8c2a						L8C2A:
.8c2a		c8		iny		                iny
.8c2b		c8		iny		                iny
.8c2c		d0 e9		bne $8c17	                bne L8C17

.8c2e						L8C2E:
.8c2e		60		rts		                rts

						;-------------------------------------------------------------------------

.8c2f						L8C2F:
.8c2f		a2 4f		ldx #$4f	                ldx #$4F
.8c31		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.8c34		f0 0a		beq $8c40	                beq L8C40
.8c36		a2 27		ldx #$27	                ldx #$27
.8c38		20 3d 92	jsr $923d	                jsr find_command; Try to find command in commands table
						                                ; Entry: ($f2),y = pointer to string
						                                ;        X = offset into command_table
						                                ; Exit:
.8c3b		90 03		bcc $8c40	                bcc L8C40
.8c3d		4c d6 80	jmp $80d6	                jmp L80D6

						;-------------------------------------------------------------------------

.8c40						L8C40:
.8c40		a5 f6		lda $f6		                lda L00F6
.8c42		48		pha		                pha
.8c43		a5 f7		lda $f7		                lda L00F7
.8c45		48		pha		                pha
.8c46		20 7b 84	jsr $847b	                jsr call_command_table_routine; Call routine from command table
						                                              ; Entry: X = offset of address in table
.8c49		68		pla		                pla
.8c4a		85 f7		sta $f7		                sta L00F7
.8c4c		68		pla		                pla
.8c4d		85 f6		sta $f6		                sta L00F6
.8c4f		60		rts		                rts

						;-------------------------------------------------------------------------

.8c50						cmd_on:
.8c50		98		tya		                tya
.8c51		48		pha		                pha
.8c52		20 e8 8d	jsr $8de8	                jsr L8DE8
.8c55		20 13 8f	jsr $8f13	                jsr L8F13
.8c58		20 9d 8d	jsr $8d9d	                jsr L8D9D
.8c5b		b0 05		bcs $8c62	                bcs L8C62
.8c5d		a2 9e		ldx #$9e	                ldx #$9E        ; TODO: error index
.8c5f		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8c62						L8C62:
.8c62		68		pla		                pla
.8c63		a8		tay		                tay
.8c64		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.8c67		90 27		bcc $8c90	                bcc L8C90
.8c69		a9 0f		lda #$0f	                lda #$F
.8c6b		85 a8		sta $a8		                sta L00A8
.8c6d		a9 00		lda #$00	                lda #0
.8c6f		85 aa		sta $aa		                sta L00AA

.8c71						L8C71:
.8c71		a9 00		lda #$00	                lda #0
.8c73		85 f6		sta $f6		                sta L00F6
.8c75		20 6e 8f	jsr $8f6e	                jsr L8F6E
.8c78		b0 07		bcs $8c81	                bcs L8C81
.8c7a		20 62 8d	jsr $8d62	                jsr L8D62
.8c7d		90 51		bcc $8cd0	                bcc L8CD0
.8c7f		e6 aa		inc $aa		                inc L00AA

.8c81						L8C81:
.8c81		c6 a8		dec $a8		                dec L00A8
.8c83		10 ec		bpl $8c71	                bpl L8C71
.8c85		a2 28		ldx #$28	                ldx #$28        ; TODO: error index
.8c87		a5 aa		lda $aa		                lda L00AA
.8c89		d0 02		bne $8c8d	                bne L8C8D
.8c8b		a2 00		ldx #$00	                ldx #0

.8c8d						L8C8D:
.8c8d		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8c90						L8C90:
.8c90		20 9c 91	jsr $919c	                jsr L919C
.8c93		85 a8		sta $a8		                sta L00A8
.8c95		20 6e 8f	jsr $8f6e	                jsr L8F6E
.8c98		90 05		bcc $8c9f	                bcc L8C9F
.8c9a		a2 00		ldx #$00	                ldx #0          ; TODO: error index
.8c9c		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8c9f						L8C9F:
.8c9f		20 62 8d	jsr $8d62	                jsr L8D62
.8ca2		90 2c		bcc $8cd0	                bcc L8CD0
.8ca4		20 58 85	jsr $8558	                jsr print_following_string
>8ca7		0d				                .byte $D
>8ca8		0a				                .byte $A
>8ca9		52 4f 4d 20 69 6d 61 67		                .text "ROM image present...overwrite ? "
>8cb1		65 20 70 72 65 73 65 6e 74 2e 2e 2e 6f 76 65 72
>8cc1		77 72 69 74 65 20 3f 20
>8cc9		00				                .byte 0
.8cca		20 54 90	jsr $9054	                jsr L9054
.8ccd		f0 01		beq $8cd0	                beq L8CD0
.8ccf		60		rts		                rts

						;-------------------------------------------------------------------------

.8cd0						L8CD0:
.8cd0		08		php		                php
.8cd1		78		sei		                sei
.8cd2		a9 00		lda #$00	                lda #0
.8cd4		85 f6		sta $f6		                sta L00F6
.8cd6		a9 80		lda #$80	                lda #$80
.8cd8		85 f7		sta $f7		                sta L00F7
.8cda		a9 72		lda #$72	                lda #<embedded_pbuf_rom
.8cdc		85 aa		sta $aa		                sta L00AA
.8cde		a9 8a		lda #$8a	                lda #>embedded_pbuf_rom
.8ce0		85 ab		sta $ab		                sta L00AB
.8ce2		a9 01		lda #$01	                lda #<L8D01
.8ce4		85 ad		sta $ad		                sta L00AD
.8ce6		a9 8d		lda #$8d	                lda #>L8D01
.8ce8		85 ac		sta $ac		                sta L00AC
.8cea		f0 02		beq $8cee	                beq L8CEE
.8cec		e6 ad		inc $ad		                inc L00AD

.8cee						L8CEE:
.8cee		a0 00		ldy #$00	                ldy #0
.8cf0		b1 aa		lda ($aa),y	                lda (L00AA),y
.8cf2		20 40 01	jsr $0140	                jsr L0140
.8cf5		e6 f6		inc $f6		                inc L00F6
.8cf7		d0 02		bne $8cfb	                bne L8CFB
.8cf9		e6 f7		inc $f7		                inc L00F7

.8cfb						L8CFB:
.8cfb		e6 aa		inc $aa		                inc L00AA
.8cfd		d0 02		bne $8d01	                bne L8D01
.8cff		e6 ab		inc $ab		                inc L00AB

.8d01						L8D01:
.8d01		c6 ac		dec $ac		                dec L00AC
.8d03		d0 e9		bne $8cee	                bne L8CEE
.8d05		c6 ad		dec $ad		                dec L00AD
.8d07		d0 e5		bne $8cee	                bne L8CEE
.8d09		20 30 8f	jsr $8f30	                jsr L8F30
						; TODO: will refer to something in the embedded pbuf ROM
.8d0c		a9 33		lda #$33	                lda #<embedded_pbuf_rom.L8033
.8d0e		85 f6		sta $f6		                sta L00F6
.8d10		a9 80		lda #$80	                lda #>embedded_pbuf_rom.L8033
.8d12		85 f7		sta $f7		                sta L00F7
.8d14		a5 aa		lda $aa		                lda L00AA
.8d16		48		pha		                pha
.8d17		20 40 01	jsr $0140	                jsr L0140
.8d1a		e6 f6		inc $f6		                inc L00F6
.8d1c		e6 f6		inc $f6		                inc L00F6
.8d1e		38		sec		                sec
.8d1f		a9 00		lda #$00	                lda #0
.8d21		e9 8d		sbc #$8d	                sbc #$8D        ; TODO: ????
.8d23		48		pha		                pha
.8d24		a5 aa		lda $aa		                lda L00AA

.8d26						L8D26:; TODO: ????
.8d26		e9 81		sbc #$81	                sbc #$81
.8d28		20 40 01	jsr $0140	                jsr L0140
.8d2b		c6 f6		dec $f6		                dec L00F6
.8d2d		68		pla		                pla
.8d2e		20 40 01	jsr $0140	                jsr L0140
.8d31		68		pla		                pla
.8d32		38		sec		                sec
.8d33		e9 80		sbc #$80	                sbc #$80        ; TODO: ????
.8d35		4a		lsr a		                lsr a
.8d36		4a		lsr a		                lsr a
.8d37		aa		tax		                tax
.8d38		20 89 92	jsr $9289	                jsr L9289
.8d3b		20 58 85	jsr $8558	                jsr print_following_string

						;-------------------------------------------------------------------------

>8d3e		6b 20 62 75 66 66 65 72		aKBufferCreatedInPage:.text "k buffer created in Page "
>8d46		20 63 72 65 61 74 65 64 20 69 6e 20 50 61 67 65
>8d56		20
>8d57		00				                .byte 0

						;-------------------------------------------------------------------------

.8d58		a6 a8		ldx $a8		                ldx L00A8
.8d5a		20 89 92	jsr $9289	                jsr L9289
.8d5d		20 03 93	jsr $9303	                jsr print_1_newline
.8d60		28		plp		                plp
.8d61		60		rts		                rts

						;-------------------------------------------------------------------------

.8d62						L8D62:       .block
.8d62		a9 07		lda #$07	                lda #$07
.8d64		85 f6		sta $f6		                sta L00F6
.8d66		a9 80		lda #$80	                lda #$80
.8d68		85 f7		sta $f7		                sta L00F7
.8d6a		20 38 01	jsr $0138	                jsr L0138
.8d6d		85 f6		sta $f6		                sta L00F6
.8d6f		a2 00		ldx #$00	                ldx #0

.8d71						L8D71:
.8d71		20 38 01	jsr $0138	                jsr L0138
.8d74		dd 34 80	cmp $8034,x	                cmp copyright,x
.8d77		18		clc		                clc
.8d78		d0 07		bne $8d81	                bne L8D81
.8d7a		e6 f6		inc $f6		                inc L00F6
.8d7c		e8		inx		                inx
.8d7d		e0 04		cpx #$04	                cpx #4
.8d7f		d0 f0		bne $8d71	                bne L8D71

.8d81						L8D81:
.8d81		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8d82						L8D82:       .block
.8d82		ad 7f 02	lda $027f	                lda os_shadow_ram_flag
.8d85		f0 14		beq $8d9b	                beq L8D9B
.8d87		ad de 0d	lda $0dde	                lda L0DDE
.8d8a		c9 f0		cmp #$f0	                cmp #<insv_handler
.8d8c		d0 0d		bne $8d9b	                bne L8D9B
.8d8e		ad df 0d	lda $0ddf	                lda L0DDF
.8d91		c9 95		cmp #$95	                cmp #>insv_handler
.8d93		d0 06		bne $8d9b	                bne L8D9B
.8d95		ae 2b 02	ldx $022b	                ldx insv+1
.8d98		e8		inx		                inx
.8d99		f0 01		beq $8d9c	                beq L8D9C

.8d9b						L8D9B:
.8d9b		18		clc		                clc

.8d9c						L8D9C:
.8d9c		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8d9d						L8D9D:       .block
.8d9d		20 ff 8b	jsr $8bff	                jsr L8BFF
.8da0		a9 0f		lda #$0f	                lda #$F
.8da2		85 a8		sta $a8		                sta L00A8

.8da4						L8DA4:
.8da4		20 cc 8d	jsr $8dcc	                jsr L8DCC
.8da7		90 04		bcc $8dad	                bcc L8DAD
.8da9		c6 a8		dec $a8		                dec L00A8
.8dab		10 f7		bpl $8da4	                bpl L8DA4

.8dad						L8DAD:
.8dad		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8dae		a9 00		lda #$00	                lda #0
.8db0		85 f6		sta $f6		                sta L00F6
.8db2		a9 ff		lda #$ff	                lda #$FF
.8db4		20 40 01	jsr $0140	                jsr L0140
.8db7		20 38 01	jsr $0138	                jsr L0138
.8dba		c9 ff		cmp #$ff	                cmp #$FF
.8dbc		08		php		                php
.8dbd		a9 00		lda #$00	                lda #0
.8dbf		20 40 01	jsr $0140	                jsr L0140
.8dc2		28		plp		                plp
.8dc3		d0 02		bne $8dc7	                bne L8DC7
.8dc5		18		clc		                clc
.8dc6		60		rts		                rts

						;-------------------------------------------------------------------------

.8dc7						L8DC7:
.8dc7		a2 3f		ldx #$3f	                ldx #$3F        ; TODO: error index
.8dc9		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8dcc						L8DCC:       .block
.8dcc		a9 00		lda #$00	                lda #$000
.8dce		85 f6		sta $f6		                sta L00F6
.8dd0		a9 80		lda #$80	                lda #$80
.8dd2		85 f7		sta $f7		                sta L00F7
.8dd4		a2 00		ldx #$00	                ldx #0

.8dd6						L8DD6:
.8dd6		20 38 01	jsr $0138	                jsr L0138
.8dd9		dd 72 8a	cmp $8a72,x	                cmp embedded_pbuf_rom,x
.8ddc		38		sec		                sec
.8ddd		d0 08		bne $8de7	                bne L8DE7
.8ddf		e6 f6		inc $f6		                inc L00F6
.8de1		e8		inx		                inx
.8de2		e0 25		cpx #$25	                cpx #<embedded_pbuf_rom.header_end
.8de4		d0 f0		bne $8dd6	                bne L8DD6
.8de6		18		clc		                clc

.8de7						L8DE7:
.8de7		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8de8						L8DE8:       .block
.8de8		18		clc		                clc
.8de9		20 1f 8f	jsr $8f1f	                jsr L8F1F
.8dec		86 a9		stx $a9		                stx L00A9
.8dee		98		tya		                tya
.8def		05 a9		ora $a9		                ora L00A9
.8df1		18		clc		                clc
.8df2		f0 05		beq $8df9	                beq L8DF9
.8df4		a2 11		ldx #$11	                ldx #$11
.8df6		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8df9						L8DF9:
.8df9		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8dfa						cmd_flush:
.8dfa		20 82 8d	jsr $8d82	                jsr L8D82
.8dfd		90 03		bcc $8e02	                bcc L8E02
.8dff		4c 07 97	jmp $9707	                jmp L9707

						;-------------------------------------------------------------------------

.8e02						L8E02:
.8e02		20 25 8f	jsr $8f25	                jsr L8F25
						; TODO: embedded ROM? $80bf
.8e05		a9 bf		lda #$bf	                lda #<embedded_pbuf_rom.L80BE+1
.8e07		85 f6		sta $f6		                sta L00F6
.8e09		a9 80		lda #$80	                lda #>embedded_pbuf_rom.L80BE+1
.8e0b		85 f7		sta $f7		                sta L00F7
.8e0d		a9 8d		lda #$8d	                lda #$8D
.8e0f		20 40 01	jsr $0140	                jsr L0140
.8e12		e6 f6		inc $f6		                inc L00F6
.8e14		d0 02		bne $8e18	                bne L8E18
.8e16		e6 f7		inc $f7		                inc L00F7

.8e18						L8E18:
.8e18		a9 81		lda #$81	                lda #$81
.8e1a		20 40 01	jsr $0140	                jsr L0140
						; TODO: embedded ROM? $8104
.8e1d		a9 04		lda #$04	                lda #<embedded_pbuf_rom.L8103+1
.8e1f		85 f6		sta $f6		                sta L00F6
.8e21		a9 81		lda #$81	                lda #>embedded_pbuf_rom.L8103+1
.8e23		85 f7		sta $f7		                sta L00F7
.8e25		a9 8d		lda #$8d	                lda #$8D
.8e27		20 40 01	jsr $0140	                jsr L0140
.8e2a		e6 f6		inc $f6		                inc L00F6
.8e2c		d0 02		bne $8e30	                bne L8E30
.8e2e		e6 f7		inc $f7		                inc L00F7

.8e30						L8E30:
.8e30		a9 81		lda #$81	                lda #$81
.8e32		20 40 01	jsr $0140	                jsr L0140
						; TODO: embedded ROM? $8031
.8e35		a9 31		lda #$31	                lda #<embedded_pbuf_rom.L8031
.8e37		85 f6		sta $f6		                sta L00F6
.8e39		a9 80		lda #$80	                lda #>embedded_pbuf_rom.L8031
.8e3b		85 f7		sta $f7		                sta L00F7
.8e3d		a9 00		lda #$00	                lda #0
.8e3f		4c 40 01	jmp $0140	                jmp L0140

						;-------------------------------------------------------------------------

.8e42						cmd_resume:
.8e42		20 82 8d	jsr $8d82	                jsr L8D82
.8e45		90 0a		bcc $8e51	                bcc L8E51
.8e47		ad 6d 0d	lda $0d6d	                lda L0D6D
.8e4a		29 7f		and #$7f	                and #$7F
.8e4c		8d 6d 0d	sta $0d6d	                sta L0D6D
.8e4f		10 10		bpl $8e61	                bpl L8E61

.8e51						L8E51:
.8e51		20 25 8f	jsr $8f25	                jsr L8F25
.8e54		a9 32		lda #$32	                lda #<embedded_pbuf_rom.L8032
.8e56		85 f6		sta $f6		                sta L00F6
.8e58		a9 80		lda #$80	                lda #>embedded_pbuf_rom.L8032
.8e5a		85 f7		sta $f7		                sta L00F7
.8e5c		a9 00		lda #$00	                lda #0
.8e5e		20 40 01	jsr $0140	                jsr L0140

.8e61						L8E61:
.8e61		a9 8f		lda #$8f	                lda #$8F
.8e63		a2 14		ldx #$14	                ldx #$14
.8e65		a0 00		ldy #$00	                ldy #0
.8e67		4c f4 ff	jmp $fff4	                jmp osbyte      ; issue paged ROM service call $14
						                                ; Character placed in printer buffer

						;-------------------------------------------------------------------------

.8e6a						cmd_pause:
.8e6a		20 82 8d	jsr $8d82	                jsr L8D82
.8e6d		90 0c		bcc $8e7b	                bcc L8E7B
.8e6f		08		php		                php
.8e70		78		sei		                sei
.8e71		ad 6d 0d	lda $0d6d	                lda L0D6D
.8e74		09 80		ora #$80	                ora #$80
.8e76		8d 6d 0d	sta $0d6d	                sta L0D6D
.8e79		28		plp		                plp
.8e7a		60		rts		                rts

						;-------------------------------------------------------------------------

.8e7b						L8E7B:
.8e7b		20 25 8f	jsr $8f25	                jsr L8F25
.8e7e		a9 32		lda #$32	                lda #<embedded_pbuf_rom.L8032
.8e80		85 f6		sta $f6		                sta L00F6
.8e82		a9 80		lda #$80	                lda #>embedded_pbuf_rom.L8032
.8e84		85 f7		sta $f7		                sta L00F7
.8e86		a9 80		lda #$80	                lda #$80
.8e88		4c 40 01	jmp $0140	                jmp L0140

						;-------------------------------------------------------------------------

.8e8b						cmd_off:
.8e8b		20 e8 8d	jsr $8de8	                jsr L8DE8
.8e8e		20 82 8d	jsr $8d82	                jsr L8D82
.8e91		b0 11		bcs $8ea4	                bcs L8EA4
.8e93		20 25 8f	jsr $8f25	                jsr L8F25
.8e96		a9 07		lda #$07	                lda #7
.8e98		85 f6		sta $f6		                sta L00F6
.8e9a		20 38 01	jsr $0138	                jsr L0138
.8e9d		85 f6		sta $f6		                sta L00F6
.8e9f		a9 ff		lda #$ff	                lda #$FF
.8ea1		20 40 01	jsr $0140	                jsr L0140

.8ea4						L8EA4:
.8ea4		4c 89 8f	jmp $8f89	                jmp L8F89

						;-------------------------------------------------------------------------

.8ea7						cmd_unknown_8ea7:
.8ea7		20 58 85	jsr $8558	                jsr print_following_string
>8eaa		0d				                .byte $D
>8eab		0a				                .byte $A
>8eac		42 79 74 65 73 20 66 72		                .text "Bytes free  : "
>8eb4		65 65 20 20 3a 20
>8eba		00				                .byte 0
.8ebb		18		clc		                clc
.8ebc		20 1f 8f	jsr $8f1f	                jsr L8F1F
.8ebf		98		tya		                tya
.8ec0		48		pha		                pha
.8ec1		8a		txa		                txa
.8ec2		48		pha		                pha
.8ec3		20 1e 8f	jsr $8f1e	                jsr L8F1E
.8ec6		98		tya		                tya
.8ec7		48		pha		                pha
.8ec8		8a		txa		                txa
.8ec9		48		pha		                pha
.8eca		20 ac 92	jsr $92ac	                jsr print_decimal_value
.8ecd		20 58 85	jsr $8558	                jsr print_following_string
>8ed0		0d				aBufferSize:    .byte $D
>8ed1		0a				                .byte $A
>8ed2		42 75 66 66 65 72 20 73		                .text "Buffer size : "
>8eda		69 7a 65 20 3a 20
>8ee0		00				                .byte 0
.8ee1		68		pla		                pla
.8ee2		85 b0		sta $b0		                sta wptr
.8ee4		68		pla		                pla
.8ee5		85 b1		sta $b1		                sta wptr+1
.8ee7		18		clc		                clc
.8ee8		68		pla		                pla
.8ee9		65 b0		adc $b0		                adc wptr
.8eeb		aa		tax		                tax
.8eec		68		pla		                pla
.8eed		65 b1		adc $b1		                adc wptr+1
.8eef		a8		tay		                tay
.8ef0		20 ac 92	jsr $92ac	                jsr print_decimal_value
.8ef3		a9 0d		lda #$0d	                lda #$D
.8ef5		20 e3 ff	jsr $ffe3	                jsr osasci
.8ef8		60		rts		                rts

						;-------------------------------------------------------------------------

.8ef9						cmd_shadow:
.8ef9		20 e8 8d	jsr $8de8	                jsr L8DE8
.8efc		20 13 8f	jsr $8f13	                jsr L8F13
.8eff		20 9d 8d	jsr $8d9d	                jsr L8D9D
.8f02		a2 9e		ldx #$9e	                ldx #$9E        ; TODO: error
.8f04		90 0a		bcc $8f10	                bcc L8F10
.8f06		a2 b5		ldx #$b5	                ldx #$B5        ; TODO: error
.8f08		ad 7f 02	lda $027f	                lda os_shadow_ram_flag
.8f0b		f0 03		beq $8f10	                beq L8F10
.8f0d		4c 69 95	jmp $9569	                jmp L9569

						;-------------------------------------------------------------------------

.8f10						L8F10:
.8f10		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8f13						L8F13:       .block
.8f13		20 82 8d	jsr $8d82	                jsr L8D82
.8f16		90 05		bcc $8f1d	                bcc L8F1D
.8f18		a2 cf		ldx #$cf	                ldx #$CF        ; TODO: error
.8f1a		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8f1d						L8F1D:
.8f1d		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8f1e						L8F1E:       .block
.8f1e		38		sec		                sec
						                .endblock

						;-------------------------------------------------------------------------

.8f1f						L8F1F:       .block
.8f1f		b8		clv		                clv
.8f20		a2 03		ldx #$03	                ldx #3
.8f22		6c 2e 02	jmp ($022e)	                jmp (cnpv)
						                .endblock

						;-------------------------------------------------------------------------

.8f25						L8F25:       .block
.8f25		20 9d 8d	jsr $8d9d	                jsr L8D9D
.8f28		90 05		bcc $8f2f	                bcc L8F2F
.8f2a		a2 54		ldx #$54	                ldx #$54        ; TODO: error index
.8f2c		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.8f2f						L8F2F:
.8f2f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8f30						L8F30:       .block
.8f30		a9 a0		lda #$a0	                lda #$A0
						; TODO: can't follow this. Is it a RAM test?
.8f32		85 aa		sta $aa		                sta L00AA
.8f34		a9 a0		lda #$a0	                lda #$A0
.8f36		85 f7		sta $f7		                sta L00F7
.8f38		20 38 01	jsr $0138	                jsr L0138
.8f3b		48		pha		                pha
.8f3c		a9 80		lda #$80	                lda #$80
.8f3e		85 f7		sta $f7		                sta L00F7
.8f40		20 38 01	jsr $0138	                jsr L0138
.8f43		48		pha		                pha
.8f44		a9 55		lda #$55	                lda #$55
.8f46		20 40 01	jsr $0140	                jsr L0140
.8f49		a9 a0		lda #$a0	                lda #$A0
.8f4b		85 f7		sta $f7		                sta L00F7
.8f4d		a9 aa		lda #$aa	                lda #$AA
.8f4f		20 40 01	jsr $0140	                jsr L0140
.8f52		a9 80		lda #$80	                lda #$80
.8f54		85 f7		sta $f7		                sta L00F7
.8f56		20 38 01	jsr $0138	                jsr L0138
.8f59		c9 55		cmp #$55	                cmp #$55
.8f5b		d0 04		bne $8f61	                bne L8F61
.8f5d		a9 c0		lda #$c0	                lda #$C0
.8f5f		85 aa		sta $aa		                sta L00AA

.8f61						L8F61:
.8f61		68		pla		                pla
.8f62		20 40 01	jsr $0140	                jsr L0140
.8f65		a9 a0		lda #$a0	                lda #$A0
.8f67		85 f7		sta $f7		                sta L00F7
.8f69		68		pla		                pla
.8f6a		20 40 01	jsr $0140	                jsr L0140
.8f6d		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8f6e						L8F6E:       .block
.8f6e		20 38 01	jsr $0138	                jsr L0138
.8f71		48		pha		                pha
.8f72		49 ff		eor #$ff	                eor #$FF
.8f74		85 a9		sta $a9		                sta L00A9
.8f76		20 40 01	jsr $0140	                jsr L0140
.8f79		20 38 01	jsr $0138	                jsr L0138
.8f7c		c5 a9		cmp $a9		                cmp L00A9
.8f7e		18		clc		                clc
.8f7f		f0 01		beq $8f82	                beq L8F82
.8f81		38		sec		                sec

.8f82						L8F82:
.8f82		68		pla		                pla
.8f83		08		php		                php
.8f84		20 40 01	jsr $0140	                jsr L0140
.8f87		28		plp		                plp
.8f88		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8f89						L8F89:       .block
.8f89		08		php		                php
.8f8a		78		sei		                sei
.8f8b		ad b7 ff	lda $ffb7	                lda default_vectors_ptr
.8f8e		85 aa		sta $aa		                sta L00AA
.8f90		ad b8 ff	lda $ffb8	                lda default_vectors_ptr+1
.8f93		85 ab		sta $ab		                sta L00AB
.8f95		a2 05		ldx #$05	                ldx #5
.8f97		a0 2f		ldy #$2f	                ldy #$2F

.8f99						L8F99:
.8f99		b1 aa		lda ($aa),y	                lda (L00AA),y
.8f9b		9d 2a 02	sta $022a,x	                sta insv,x
.8f9e		88		dey		                dey
.8f9f		ca		dex		                dex
.8fa0		10 f7		bpl $8f99	                bpl L8F99
.8fa2		28		plp		                plp
.8fa3		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.8fa4						cmd_rload:
.8fa4		90 20		bcc $8fc6	                bcc L8FC6
.8fa6		20 58 85	jsr $8558	                jsr print_following_string
>8fa9		0d				                .byte $D
>8faa		0a				                .byte $A
>8fab		20 20 2a 52 4c 4f 41 44		                .text "  *RLOAD <filename> R<n>"
>8fb3		20 3c 66 69 6c 65 6e 61 6d 65 3e 20 52 3c 6e 3e
>8fc3		0d				                .byte $D
>8fc4		00				                .byte 0
.8fc5		60		rts		                rts

						;-------------------------------------------------------------------------

.8fc6						L8FC6:
.8fc6		20 da 91	jsr $91da	                jsr L91DA
.8fc9		20 9c 91	jsr $919c	                jsr L919C
.8fcc		85 a8		sta $a8		                sta L00A8
.8fce		48		pha		                pha
.8fcf		20 ff 8b	jsr $8bff	                jsr L8BFF
.8fd2		20 cc 8d	jsr $8dcc	                jsr L8DCC
.8fd5		b0 36		bcs $900d	                bcs L900D
.8fd7		20 58 85	jsr $8558	                jsr print_following_string
>8fda		0d				                .byte $D
>8fdb		0a				                .byte $A
>8fdc		50 72 69 6e 74 20 42 75		                .text "Print Buffer present...overwrite ? "
>8fe4		66 66 65 72 20 70 72 65 73 65 6e 74 2e 2e 2e 6f
>8ff4		76 65 72 77 72 69 74 65 20 3f 20
>8fff		00				                .byte 0
.9000		20 54 90	jsr $9054	                jsr L9054
.9003		f0 02		beq $9007	                beq L9007
.9005		68		pla		                pla
.9006		60		rts		                rts

						;-------------------------------------------------------------------------

.9007						L9007:
.9007		20 e8 8d	jsr $8de8	                jsr L8DE8
.900a		20 89 8f	jsr $8f89	                jsr L8F89

.900d						L900D:
.900d		20 7e 91	jsr $917e	                jsr L917E
.9010		a9 20		lda #$20	                lda #>rload_ram_buffer
.9012		8d e3 1f	sta $1fe3	                sta rload_osfile_pblock+3
.9015		a9 ff		lda #$ff	                lda #$FF        ;load file
.9017		20 77 91	jsr $9177	                jsr call_osfile_1fe0
.901a		20 ff 8b	jsr $8bff	                jsr L8BFF
.901d		78		sei		                sei
.901e		a9 00		lda #$00	                lda #<rload_ram_buffer
.9020		85 b0		sta $b0		                sta wptr+0
.9022		a9 20		lda #$20	                lda #>rload_ram_buffer
.9024		85 b1		sta $b1		                sta wptr+1
						; TODO: $8000
.9026		a9 00		lda #$00	                lda #$00
.9028		85 f6		sta $f6		                sta L00F6
.902a		a9 80		lda #$80	                lda #$80
.902c		85 f7		sta $f7		                sta L00F7
.902e		68		pla		                pla
.902f		85 a8		sta $a8		                sta L00A8
.9031		ad eb 1f	lda $1feb	                lda rload_osfile_pblock+$b
.9034		85 ab		sta $ab		                sta L00AB
.9036		ad ea 1f	lda $1fea	                lda rload_osfile_pblock+$a
.9039		f0 02		beq $903d	                beq L903D
.903b		e6 ab		inc $ab		                inc L00AB

.903d						L903D:
.903d		a0 00		ldy #$00	                ldy #0
.903f		b1 b0		lda ($b0),y	                lda (wptr),y
.9041		20 40 01	jsr $0140	                jsr L0140
.9044		e6 b0		inc $b0		                inc wptr
.9046		e6 f6		inc $f6		                inc L00F6
.9048		d0 f3		bne $903d	                bne L903D
.904a		e6 b1		inc $b1		                inc wptr+1
.904c		e6 f7		inc $f7		                inc L00F7
.904e		c6 ab		dec $ab		                dec L00AB
.9050		d0 eb		bne $903d	                bne L903D
.9052		58		cli		                cli
.9053		60		rts		                rts

						;-------------------------------------------------------------------------

.9054						L9054:       .block
.9054		20 e0 ff	jsr $ffe0	                jsr osrdch
.9057		48		pha		                pha
.9058		20 03 93	jsr $9303	                jsr print_1_newline
.905b		68		pla		                pla
.905c		29 df		and #$df	                and #$DF
.905e		c9 59		cmp #$59	                cmp #'Y'
.9060		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9061						cmd_roms:
.9061		90 0f		bcc $9072	                bcc L9072
.9063		20 58 85	jsr $8558	                jsr print_following_string
>9066		0d				                .byte $D
>9067		0a				                .byte $A
>9068		20 20 2a 52 4f 4d 53		                .text "  *ROMS"
>906f		0d				                .byte $D
>9070		00				                .byte 0
.9071		60		rts		                rts

						;-------------------------------------------------------------------------

.9072						L9072:
.9072		20 ff 8b	jsr $8bff	                jsr L8BFF
.9075		20 03 93	jsr $9303	                jsr print_1_newline
.9078		a2 0f		ldx #$0f	                ldx #$F

.907a						L907A:
.907a		86 a8		stx $a8		                stx L00A8
.907c		a0 00		ldy #$00	                ldy #0
.907e		20 89 92	jsr $9289	                jsr L9289
.9081		a9 3a		lda #$3a	                lda #':'
.9083		20 ee ff	jsr $ffee	                jsr oswrch
.9086		20 62 8d	jsr $8d62	                jsr L8D62
.9089		08		php		                php
.908a		b0 0d		bcs $9099	                bcs L9099
.908c		20 58 85	jsr $8558	                jsr print_following_string
>908f		3f 3f 3f 3f 3f			                .text "?????"
>9094		00				                .byte 0
.9095		a2 0e		ldx #$0e	                ldx #$E
.9097		d0 17		bne $90b0	                bne L90B0

.9099						L9099:
.9099		a2 09		ldx #$09	                ldx #9

.909b						L909B:
.909b		86 f6		stx $f6		                stx L00F6
.909d		20 38 01	jsr $0138	                jsr L0138
.90a0		c9 20		cmp #$20	                cmp #' '
.90a2		90 0c		bcc $90b0	                bcc L90B0
.90a4		c9 7f		cmp #$7f	                cmp #$7F
.90a6		b0 08		bcs $90b0	                bcs L90B0
.90a8		20 ee ff	jsr $ffee	                jsr oswrch
.90ab		e8		inx		                inx
.90ac		e0 1f		cpx #$1f	                cpx #$1F
.90ae		d0 eb		bne $909b	                bne L909B

.90b0						L90B0:
.90b0		20 08 93	jsr $9308	                jsr print_1_space
.90b3		e8		inx		                inx
.90b4		e0 21		cpx #$21	                cpx #'!'
.90b6		d0 f8		bne $90b0	                bne L90B0
.90b8		a9 28		lda #$28	                lda #'('
.90ba		20 ee ff	jsr $ffee	                jsr oswrch
.90bd		a6 a8		ldx $a8		                ldx L00A8
.90bf		e0 0b		cpx #$0b	                cpx #$B
.90c1		f0 04		beq $90c7	                beq L90C7
.90c3		bd a0 02	lda $02a0,x	                lda os_rom_types,x
.90c6		2a		rol a		                rol a

.90c7						L90C7:
.90c7		a9 00		lda #$00	                lda #0
.90c9		69 30		adc #$30	                adc #'0'
.90cb		20 ee ff	jsr $ffee	                jsr oswrch
.90ce		a9 29		lda #$29	                lda #')'
.90d0		20 ee ff	jsr $ffee	                jsr oswrch
.90d3		20 08 93	jsr $9308	                jsr print_1_space
.90d6		a9 00		lda #$00	                lda #0
.90d8		85 f6		sta $f6		                sta L00F6
.90da		20 6e 8f	jsr $8f6e	                jsr L8F6E
.90dd		90 0c		bcc $90eb	                bcc L90EB
.90df		28		plp		                plp
.90e0		08		php		                php
.90e1		90 28		bcc $910b	                bcc L910B
.90e3		20 f9 91	jsr $91f9	                jsr L91F9
.90e6		a5 ab		lda $ab		                lda L00AB
.90e8		38		sec		                sec
.90e9		b0 09		bcs $90f4	                bcs L90F4

.90eb						L90EB:
.90eb		20 30 8f	jsr $8f30	                jsr L8F30
.90ee		a5 aa		lda $aa		                lda L00AA
.90f0		38		sec		                sec
.90f1		e9 80		sbc #$80	                sbc #$80
.90f3		18		clc		                clc

.90f4						L90F4:
.90f4		08		php		                php
.90f5		4a		lsr a		                lsr a
.90f6		4a		lsr a		                lsr a
.90f7		aa		tax		                tax
.90f8		20 89 92	jsr $9289	                jsr L9289
.90fb		a9 6b		lda #$6b	                lda #'k'
.90fd		20 ee ff	jsr $ffee	                jsr oswrch
.9100		28		plp		                plp
.9101		b0 08		bcs $910b	                bcs L910B
.9103		20 58 85	jsr $8558	                jsr print_following_string
>9106		20 52 61 6d			                .text " Ram"
>910a		00				                .byte 0
.910b						L910B:
.910b		28		plp		                plp
.910c		20 03 93	jsr $9303	                jsr print_1_newline
.910f		a6 a8		ldx $a8		                ldx L00A8
.9111		ca		dex		                dex
.9112		30 03		bmi $9117	                bmi L9117
.9114		4c 7a 90	jmp $907a	                jmp L907A

						;-------------------------------------------------------------------------

.9117						L9117:
.9117		60		rts		                rts

						;-------------------------------------------------------------------------

.9118						cmd_rsave:
.9118		90 20		bcc $913a	                bcc L913A
.911a		20 58 85	jsr $8558	                jsr print_following_string
>911d		0d				                .byte $D
>911e		0a				                .byte $A
>911f		20 20 2a 52 53 41 56 45		                .text "  *RSAVE R<n> <filename>"
>9127		20 52 3c 6e 3e 20 3c 66 69 6c 65 6e 61 6d 65 3e
>9137		0d				                .byte $D
>9138		00				                .byte 0
.9139		60		rts		                rts

						;-------------------------------------------------------------------------

.913a						L913A:
.913a		20 9c 91	jsr $919c	                jsr L919C
.913d		20 da 91	jsr $91da	                jsr L91DA
.9140		20 f9 91	jsr $91f9	                jsr L91F9
.9143		20 7e 91	jsr $917e	                jsr L917E
.9146		18		clc		                clc
.9147		a5 ab		lda $ab		                lda L00AB
.9149		6d eb 1f	adc $1feb	                adc rload_osfile_pblock+$b
.914c		8d ef 1f	sta $1fef	                sta rload_osfile_pblock+$f
.914f		78		sei		                sei
.9150		a9 00		lda #$00	                lda #0          ; TODO: $8000
.9152		85 f6		sta $f6		                sta L00F6
.9154		a9 80		lda #$80	                lda #$80
.9156		85 f7		sta $f7		                sta L00F7
.9158		a9 00		lda #$00	                lda #<rload_ram_buffer
.915a		85 b2		sta $b2		                sta L00B2
.915c		a9 20		lda #$20	                lda #>rload_ram_buffer
.915e		85 b3		sta $b3		                sta L00B3

.9160						L9160:
.9160		a0 00		ldy #$00	                ldy #0
.9162		20 38 01	jsr $0138	                jsr L0138
.9165		91 b2		sta ($b2),y	                sta (L00B2),y
.9167		e6 f6		inc $f6		                inc L00F6
.9169		e6 b2		inc $b2		                inc L00B2
.916b		d0 f3		bne $9160	                bne L9160
.916d		e6 f7		inc $f7		                inc L00F7
.916f		e6 b3		inc $b3		                inc L00B3
.9171		c6 ab		dec $ab		                dec L00AB
.9173		d0 eb		bne $9160	                bne L9160
.9175		a9 00		lda #$00	                lda #0

						;-------------------------------------------------------------------------

.9177						call_osfile_1fe0:.block
.9177		a2 e0		ldx #$e0	                ldx #<rload_osfile_pblock
.9179		a0 1f		ldy #$1f	                ldy #>rload_osfile_pblock
.917b		4c dd ff	jmp $ffdd	                jmp osfile
						                .endblock

						;-------------------------------------------------------------------------

.917e						L917E:       .block
.917e		a2 11		ldx #$11	                ldx #$11

.9180						L9180:
.9180		bd 8a 91	lda $918a,x	                lda L918A,x
.9183		9d e0 1f	sta $1fe0,x	                sta rload_osfile_pblock,x
.9186		ca		dex		                dex
.9187		10 f7		bpl $9180	                bpl L9180
.9189		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.918a						L918A:
>918a		56 01				                .word file_name_buffer ;file name
>918c		00 80 ff ff			                .dword $ffff8000 ;load
>9190		00 80 ff ff			                .dword $ffff8000 ;exec
>9194		00 20 ff ff			                .dword $ffff2000 ;start
>9198		00 00 ff ff			                .dword $ffff0000 ;end

						;-------------------------------------------------------------------------

.919c						L919C:       .block
.919c		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.919f		b0 2f		bcs $91d0	                bcs L91D0
.91a1		20 4d 93	jsr $934d	                jsr skip_string_spaces; Check if next command line char is space or eol
						                                      ; Entry: ($f2),y = command line
						                                      ; Exit:  ($f2),y = next char
						                                      ;        Z=1 if char was CR or space
.91a4		29 5f		and #$5f	                and #$5F
.91a6		c9 52		cmp #$52	                cmp #'R'
.91a8		d0 26		bne $91d0	                bne L91D0
.91aa		20 4d 93	jsr $934d	                jsr skip_string_spaces; Check if next command line char is space or eol
						                                      ; Entry: ($f2),y = command line
						                                      ; Exit:  ($f2),y = next char
						                                      ;        Z=1 if char was CR or space
.91ad		f0 26		beq $91d5	                beq L91D5
.91af		20 55 95	jsr $9555	                jsr atoi_1_digit; Convert 1 decimal digit to a value
						                                ; Entry: A = ASCII digit
						                                ; Exit:  A = value
						                                ;        C=1 if digit was invalid
.91b2		b0 21		bcs $91d5	                bcs L91D5
.91b4		85 a8		sta $a8		                sta L00A8
.91b6		20 4d 93	jsr $934d	                jsr skip_string_spaces; Check if next command line char is space or eol
						                                      ; Entry: ($f2),y = command line
						                                      ; Exit:  ($f2),y = next char
						                                      ;        Z=1 if char was CR or space
.91b9		f0 12		beq $91cd	                beq L91CD
.91bb		20 55 95	jsr $9555	                jsr atoi_1_digit; Convert 1 decimal digit to a value
						                                ; Entry: A = ASCII digit
						                                ; Exit:  A = value
						                                ;        C=1 if digit was invalid
.91be		b0 15		bcs $91d5	                bcs L91D5
.91c0		85 a9		sta $a9		                sta L00A9
.91c2		a5 a8		lda $a8		                lda L00A8
.91c4		0a		asl a		                asl a
.91c5		0a		asl a		                asl a
.91c6		65 a8		adc $a8		                adc L00A8
.91c8		0a		asl a		                asl a
.91c9		65 a9		adc $a9		                adc L00A9
.91cb		85 a8		sta $a8		                sta L00A8

.91cd						L91CD:
.91cd		a5 a8		lda $a8		                lda L00A8
.91cf		60		rts		                rts

						;-------------------------------------------------------------------------

.91d0						L91D0:
.91d0		a2 83		ldx #$83	                ldx #$83        ; TODO: Bad command
.91d2		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.91d5						L91D5:
.91d5		a2 6d		ldx #$6d	                ldx #$6D        ; TODO: Bad hex
.91d7		4c 57 93	jmp $9357	                jmp do_error
						                .endblock

						;-------------------------------------------------------------------------

.91da						L91DA:       .block
.91da		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.91dd		b0 0f		bcs $91ee	                bcs L91EE
.91df		a2 00		ldx #$00	                ldx #0

.91e1						L91E1:
.91e1		20 4d 93	jsr $934d	                jsr skip_string_spaces; Check if next command line char is space or eol
						                                      ; Entry: ($f2),y = command line
						                                      ; Exit:  ($f2),y = next char
						                                      ;        Z=1 if char was CR or space
.91e4		f0 0d		beq $91f3	                beq L91F3
.91e6		9d 56 01	sta $0156,x	                sta file_name_buffer,x
.91e9		e8		inx		                inx
.91ea		e0 0c		cpx #$0c	                cpx #$C
.91ec		d0 f3		bne $91e1	                bne L91E1

.91ee						L91EE:
.91ee		a2 90		ldx #$90	                ldx #$90
.91f0		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.91f3						L91F3:
.91f3		a9 0d		lda #$0d	                lda #$D
.91f5		9d 56 01	sta $0156,x	                sta file_name_buffer,x
.91f8		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.91f9						L91F9:       .block
.91f9		20 ff 8b	jsr $8bff	                jsr L8BFF
.91fc		a9 00		lda #$00	                lda #0
.91fe		85 b0		sta $b0		                sta wptr
.9200		a9 00		lda #$00	                lda #0
.9202		85 b2		sta $b2		                sta L00B2
						; TODO: $8000
						; TODO: $a000
.9204		a9 80		lda #$80	                lda #$80
.9206		85 b1		sta $b1		                sta wptr+1
.9208		a9 a0		lda #$a0	                lda #$A0
.920a		85 b3		sta $b3		                sta L00B3
.920c		a9 40		lda #$40	                lda #$40
.920e		85 ab		sta $ab		                sta L00AB

.9210						L9210:
.9210		20 27 92	jsr $9227	                jsr L9227
.9213		85 ac		sta $ac		                sta L00AC
.9215		20 32 92	jsr $9232	                jsr L9232
.9218		c5 ac		cmp $ac		                cmp L00AC
.921a		d0 0a		bne $9226	                bne L9226
.921c		e6 b0		inc $b0		                inc wptr
.921e		e6 b2		inc $b2		                inc L00B2
.9220		d0 ee		bne $9210	                bne L9210
.9222		a9 20		lda #$20	                lda #$20
.9224		85 ab		sta $ab		                sta L00AB

.9226						L9226:
.9226		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9227						L9227:       .block
.9227		a5 b0		lda $b0		                lda wptr
.9229		85 f6		sta $f6		                sta L00F6
.922b		a5 b1		lda $b1		                lda wptr+1
.922d		85 f7		sta $f7		                sta L00F7
.922f		4c 38 01	jmp $0138	                jmp L0138
						                .endblock

						;-------------------------------------------------------------------------

.9232						L9232:       .block
.9232		a5 b2		lda $b2		                lda L00B2
.9234		85 f6		sta $f6		                sta L00F6
.9236		a5 b3		lda $b3		                lda L00B3
.9238		85 f7		sta $f7		                sta L00F7
.923a		4c 38 01	jmp $0138	                jmp L0138
						                .endblock

						;-------------------------------------------------------------------------

						; Try to find command in commands table
						; Entry: ($f2),y = pointer to string
						;        X = offset into command_table
						; Exit:

.923d						find_command:   .block
.923d		86 a8		stx $a8		                stx L00A8
.923f		18		clc		                clc
.9240		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.9243		84 a9		sty $a9		                sty L00A9

.9245						L9245:
.9245		a4 a9		ldy $a9		                ldy L00A9
.9247		ca		dex		                dex
.9248		88		dey		                dey

.9249						L9249:
.9249		e8		inx		                inx
.924a		c8		iny		                iny
.924b		bd 58 94	lda $9458,x	                lda command_table,x; "BUFFER"
.924e		38		sec		                sec
.924f		f0 29		beq $927a	                beq done        ; taken if end of table reached
.9251		30 16		bmi $9269	                bmi L9269
.9253		51 f2		eor ($f2),y	                eor ($F2),y
.9255		29 5f		and #$5f	                and #$5F
.9257		f0 f0		beq $9249	                beq L9249
.9259		b1 f2		lda ($f2),y	                lda ($F2),y
.925b		c9 2e		cmp #$2e	                cmp #'.'
.925d		f0 12		beq $9271	                beq L9271

.925f						L925F:
.925f		e8		inx		                inx
.9260		bd 58 94	lda $9458,x	                lda command_table,x; "BUFFER"
.9263		10 fa		bpl $925f	                bpl L925F       ; taken if end of command name reached

.9265						L9265:
.9265		e8		inx		                inx
.9266		e8		inx		                inx
.9267		d0 dc		bne $9245	                bne L9245

.9269						L9269:
.9269		b1 f2		lda ($f2),y	                lda ($F2),y
.926b		20 7b 92	jsr $927b	                jsr isalpha     ; Check if char is alphabetic
						                                ; Entry: A = char of interest
						                                ; Exit:  C=0 if alpha, C=1 if not alpha
.926e		90 f5		bcc $9265	                bcc L9265    ; taken if alpha
.9270		88		dey		                dey

.9271						L9271:
.9271		c8		iny		                iny
.9272		ca		dex		                dex

.9273						L9273:
.9273		e8		inx		                inx
.9274		bd 58 94	lda $9458,x	                lda command_table,x; "BUFFER"
.9277		10 fa		bpl $9273	                bpl L9273
.9279		18		clc		                clc

.927a						done:
.927a		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Check if char is alphabetic
						; Entry: A = char of interest
						; Exit:  C=0 if alpha, C=1 if not alpha

.927b						isalpha:        .block
.927b		48		pha		                pha             ; store char
.927c		29 df		and #$df	                and #$DF        ; convert lower case to upper case
.927e		c9 41		cmp #$41	                cmp #'A'
.9280		90 04		bcc $9286	                bcc not_alpha   ; taken if not alpha
.9282		c9 5b		cmp #$5b	                cmp #'['        ; 'Z'+1
.9284		90 01		bcc $9287	                bcc done        ; taken if alpha

.9286						not_alpha:
.9286		38		sec		                sec

.9287						done:
.9287		68		pla		                pla             ; restore char
.9288		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9289						L9289:       .block
.9289		8a		txa		                txa
.928a		a2 ff		ldx #$ff	                ldx #$FF
.928c		38		sec		                sec

.928d						L928D:
.928d		e8		inx		                inx
.928e		e9 0a		sbc #$0a	                sbc #$A
.9290		b0 fb		bcs $928d	                bcs L928D
.9292		69 0a		adc #$0a	                adc #$A
.9294		18		clc		                clc
.9295		20 9a 92	jsr $929a	                jsr L929A
.9298		aa		tax		                tax
.9299		38		sec		                sec
						                .endblock

						;-------------------------------------------------------------------------

.929a						L929A:       .block
.929a		48		pha		                pha
.929b		8a		txa		                txa
.929c		b0 06		bcs $92a4	                bcs L92A4
.929e		d0 04		bne $92a4	                bne L92A4
.92a0		a9 20		lda #$20	                lda #' '
.92a2		d0 03		bne $92a7	                bne L92A7

.92a4						L92A4:
.92a4		38		sec		                sec
.92a5		09 30		ora #$30	                ora #'0'

.92a7						L92A7:
.92a7		20 ee ff	jsr $ffee	                jsr oswrch
.92aa		68		pla		                pla
.92ab		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.92ac						print_decimal_value:.block
.92ac		86 b0		stx $b0		                stx wptr
.92ae		84 b1		sty $b1		                sty wptr+1
.92b0		a0 00		ldy #$00	                ldy #0
.92b2		84 b2		sty $b2		                sty L00B2

.92b4						L92B4:
.92b4		a2 00		ldx #$00	                ldx #0

.92b6						L92B6:
.92b6		a5 b1		lda $b1		                lda wptr+1
.92b8		d9 f1 92	cmp $92f1,y	                cmp tens_table+1,y
.92bb		90 1a		bcc $92d7	                bcc L92D7
.92bd		d0 07		bne $92c6	                bne L92C6
.92bf		a5 b0		lda $b0		                lda wptr
.92c1		d9 f0 92	cmp $92f0,y	                cmp tens_table,y
.92c4		90 11		bcc $92d7	                bcc L92D7

.92c6						L92C6:
.92c6		a5 b0		lda $b0		                lda wptr
.92c8		f9 f0 92	sbc $92f0,y	                sbc tens_table,y
.92cb		85 b0		sta $b0		                sta wptr
.92cd		a5 b1		lda $b1		                lda wptr+1
.92cf		f9 f1 92	sbc $92f1,y	                sbc tens_table+1,y
.92d2		85 b1		sta $b1		                sta wptr+1
.92d4		e8		inx		                inx
.92d5		d0 df		bne $92b6	                bne L92B6

.92d7						L92D7:
.92d7		8a		txa		                txa
.92d8		d0 04		bne $92de	                bne L92DE
.92da		a6 b2		ldx $b2		                ldx L00B2
.92dc		f0 05		beq $92e3	                beq L92E3

.92de						L92DE:
.92de		20 eb 92	jsr $92eb	                jsr L92EB
.92e1		e6 b2		inc $b2		                inc L00B2

.92e3						L92E3:
.92e3		c8		iny		                iny
.92e4		c8		iny		                iny
.92e5		c0 08		cpy #$08	                cpy #8
.92e7		90 cb		bcc $92b4	                bcc L92B4
.92e9		a5 b0		lda $b0		                lda wptr
						                .endblock

						;-------------------------------------------------------------------------

.92eb						L92EB:       .block
.92eb		09 30		ora #$30	                ora #'0'
.92ed		4c ee ff	jmp $ffee	                jmp oswrch
						                .endblock

						;-------------------------------------------------------------------------

>92f0		10 27				tens_table:     .word 10000
>92f2		e8 03				                .word 1000
>92f4		64 00				                .word 100
>92f6		0a 00				                .word 10

						;-------------------------------------------------------------------------

.92f8						print_n_spaces:; unused?
.92f8		48		pha		                pha
.92f9		a9 20		lda #$20	                lda #' '

.92fb						L92FB:
.92fb		20 ee ff	jsr $ffee	                jsr oswrch
.92fe		ca		dex		                dex
.92ff		d0 fa		bne $92fb	                bne L92FB
.9301		68		pla		                pla
.9302		60		rts		                rts

						;-------------------------------------------------------------------------

.9303						print_1_newline:.block
.9303		a9 0d		lda #$0d	                lda #$D
.9305		4c e3 ff	jmp $ffe3	                jmp osasci
						                .endblock

						;-------------------------------------------------------------------------

.9308						print_1_space:  .block
.9308		48		pha		                pha
.9309		a9 20		lda #$20	                lda #' '
.930b		20 ee ff	jsr $ffee	                jsr oswrch
.930e		68		pla		                pla
.930f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9310						inc_wptr:       .block
.9310		e6 b0		inc $b0		                inc wptr
.9312		d0 02		bne $9316	                bne L9316
.9314		e6 b1		inc $b1		                inc wptr+1

.9316						L9316:
.9316		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9317						L9317:       .block
.9317		48		pha		                pha
.9318		8a		txa		                txa
.9319		48		pha		                pha             ; 01=X 02=A
.931a		98		tya		                tya
.931b		48		pha		                pha             ; 01=Y 02=X 03=A
						; TODO: $933a-1
.931c		a9 93		lda #$93	                lda #>exit-1
.931e		48		pha		                pha             ; 01=93 02=Y 03=X 04=A
.931f		a9 39		lda #$39	                lda #<exit-1
.9321		48		pha		                pha             ; 01=39 02=93 03=Y 04=X 05=A 06=RTSL 07=RTSH
.9322		a0 05		ldy #$05	                ldy #5

.9324						L9324:
.9324		ba		tsx		                tsx
.9325		bd 07 01	lda $0107,x	                lda $107,x
.9328		48		pha		                pha
.9329		88		dey		                dey
.932a		d0 f8		bne $9324	                bne L9324
						; 01=Y 02=X 03=A 04=RTSL 05=RTSH 06=39 07=93 08=Y 09=X 0A=A 0B=RTSL 0C=RTSH
						;                                ^^
.932c		a0 0a		ldy #$0a	                ldy #$A

.932e						L932E:
.932e		bd 09 01	lda $0109,x	                lda $109,x
.9331		9d 0b 01	sta $010b,x	                sta $10B,x
.9334		ca		dex		                dex
.9335		88		dey		                dey
.9336		d0 f6		bne $932e	                bne L932E
.9338		68		pla		                pla
.9339		68		pla		                pla
.933a						exit:
.933a		68		pla		                pla
.933b		a8		tay		                tay
.933c		68		pla		                pla
.933d		aa		tax		                tax
.933e		68		pla		                pla
.933f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9340						L9340:
.9340		c8		iny		                iny

						;-------------------------------------------------------------------------

						; Check if command line tail is empty.
						; Entry: ($f2),y = command line tail
						; Exit:  C=0 - something on command line
						;        C=1 - nothing on command line

.9341						is_string_empty:.block

.9341		b1 f2		lda ($f2),y	                lda (L00F2),y ; read next value from command line
.9343		c9 0d		cmp #$0d	                cmp #$D
.9345		f0 05		beq $934c	                beq L934C ; taken with C=1 if eol
.9347		c9 20		cmp #$20	                cmp #' '
.9349		f0 f5		beq $9340	                beq L9340    ; taken with C=1 if space - move to next byte and try again
.934b		18		clc		                clc

.934c						L934C:
.934c		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Check if next command line char is space or eol
						; Entry: ($f2),y = command line
						; Exit:  ($f2),y = next char
						;        Z=1 if char was CR or space

.934d						skip_string_spaces:.block
.934d		b1 f2		lda ($f2),y	                lda (L00F2),y
.934f		c9 0d		cmp #$0d	                cmp #$D
.9351		f0 03		beq $9356	                beq L9356
.9353		c8		iny		                iny
.9354		c9 20		cmp #$20	                cmp #' '

.9356						L9356:
.9356		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9357						do_error:
.9357		a0 00		ldy #$00	                ldy #0
.9359		8c 00 01	sty $0100	                sty L0100
.935c		ca		dex		                dex
.935d		88		dey		                dey

.935e						L935E:
.935e		e8		inx		                inx
.935f		c8		iny		                iny
.9360		bd 6b 93	lda $936b,x	                lda errors_table,x
.9363		99 01 01	sta $0101,y	                sta $101,y
.9366		d0 f6		bne $935e	                bne L935E
.9368		4c 00 01	jmp $0100	                jmp L0100

						;-------------------------------------------------------------------------

						command_address: .macro value
						                .endmacro

>936b		6e				errors_table:   .byte $6E
>936c		4e 6f 20 53 69 64 65 77		                .text "No Sideways RAM"; $00
>9374		61 79 73 20 52 41 4d
>937b		00				                .byte 0
>937c		6f				                .byte $6F
>937d		50 72 69 6e 74 65 72 20		                .text "Printer buffer active"; $11
>9385		62 75 66 66 65 72 20 61 63 74 69 76 65
>9392		00				                .byte 0
>9393		70				                .byte $70
>9394		52 4f 4d 20 69 6d 61 67		                .text "ROM image in RAM card"
>939c		65 20 69 6e 20 52 41 4d 20 63 61 72 64
>93a9		00				                .byte 0
>93aa		71				                .byte $71
>93ab		53 57 52 20 77 72 69 74		                .text "SWR write protected"
>93b3		65 20 70 72 6f 74 65 63 74 65 64
>93be		00				                .byte 0
>93bf		72				                .byte $72
>93c0		50 72 69 6e 74 20 62 75		                .text "Print buffer not set up"
>93c8		66 66 65 72 20 6e 6f 74 20 73 65 74 20 75 70
>93d7		00				                .byte 0
>93d8		73				                .byte $73
>93d9		42 61 64 20 68 65 78		                .text "Bad hex" ; $6d
>93e0		00				                .byte 0
>93e1		74				                .byte $74
>93e2		4b 65 79 20 6d 69 73 73		                .text "Key missing"
>93ea		69 6e 67
>93ed		00				                .byte 0
>93ee		fe				                .byte $FE
>93ef		42 61 64 20 63 6f 6d 6d		                .text "Bad command"; ; $83
>93f7		61 6e 64
>93fa		00				                .byte 0
>93fb		cc				                .byte $CC
>93fc		42 61 64 20 66 69 6c 65		                .text "Bad filename"
>9404		6e 61 6d 65
>9408		00				                .byte 0
>9409		75				                .byte $75
>940a		50 72 69 6e 74 65 72 20		                .text "Printer Buffer in SWR"
>9412		42 75 66 66 65 72 20 69 6e 20 53 57 52
>941f		00				                .byte 0
>9420		76				                .byte $76
>9421		53 68 61 64 6f 77 20 52		                .text "Shadow RAM not available"
>9429		41 4d 20 6e 6f 74 20 61 76 61 69 6c 61 62 6c 65
>9439		00				                .byte 0
>943a		77				                .byte $77
>943b		50 72 69 6e 74 65 72 20		                .text "Printer Buffer in Shadow RAM"
>9443		42 75 66 66 65 72 20 69 6e 20 53 68 61 64 6f 77
>9453		20 52 41 4d
>9457		00				                .byte 0
>9458		42 55 46 46 45 52		command_table:  .text "BUFFER"
>945e		8c 0f				                .byte >cmd_buffer-1,<cmd_buffer-1
>9460		4a 4f 59 53 54 49 43 4b		                .text "JOYSTICK"
>9468		80 da				                .byte >cmd_joystick-1,<cmd_joystick-1
>946a		52 4c 4f 41 44			                .text "RLOAD"
>946f		8f a3				                .byte >cmd_rload-1,<cmd_rload-1
>9471		52 4f 4d 53			                .text "ROMS"
>9475		90 60				                .byte >cmd_roms-1,<cmd_roms-1
>9477		52 53 41 56 45			                .text "RSAVE"
>947c		91 17				                .byte >cmd_rsave-1,<cmd_rsave-1
>947e		00				                .byte 0
>947f		4f 4e				asc_947F:       .text "ON"
>9481		8c 4f				                .byte >cmd_on-1,<cmd_on-1
>9483		4f 46 46			                .text "OFF"
>9486		8e 8a				                .byte >cmd_off-1,<cmd_off-1
>9488		46 4c 55 53 48			                .text "FLUSH"
>948d		8d f9				                .byte >cmd_flush-1,<cmd_flush-1
>948f		50 41 55 53 45			                .text "PAUSE"
>9494		8e 69				                .byte >cmd_pause-1,<cmd_pause-1
>9496		52 45 53 55 4d 45		                .text "RESUME"
>949c		8e 41				                .byte >cmd_resume-1,<cmd_resume-1
>949e		53 48 41 44 4f 57		                .text "SHADOW"
>94a4		8e f8				                .byte >cmd_shadow-1,<cmd_shadow-1
>94a6		00				                .byte 0
>94a7		8e a6				                .byte >cmd_unknown_8ea7-1,<cmd_unknown_8ea7-1
>94a9		53 45 54 55 50			joystick_subcommands:.text "SETUP"
>94ae		97 17				                .byte >cmd_joystick_setup-1,<cmd_joystick_setup-1
>94b0		54 45 53 54			                .text "TEST"
>94b4		97 dc				                .byte >cmd_joystick_test-1,<cmd_joystick_test-1
>94b6		00				                .byte 0

						;-------------------------------------------------------------------------

.94b7						strtoi:         .block

.94b7		20 41 93	jsr $9341	                jsr is_string_empty; Check if command line tail is empty.
						                                   ; Entry: ($f2),y = command line tail
						                                   ; Exit:  C=0 - something on command line
						                                   ;        C=1 - nothing on command line
.94ba		f0 41		beq $94fd	                beq bad_hex
.94bc		a9 00		lda #$00	                lda #0
.94be		85 b0		sta $b0		                sta wptr
.94c0		85 b1		sta $b1		                sta wptr+1
.94c2		20 c5 ff	jsr $ffc5	                jsr gsread      ; EAUG p12
.94c5		b0 36		bcs $94fd	                bcs bad_hex     ; taken if eol
.94c7		c9 26		cmp #$26	                cmp #'&'
.94c9		d0 37		bne $9502	                bne decimal
						; hex value
.94cb		20 c5 ff	jsr $ffc5	                jsr gsread
.94ce		b0 2d		bcs $94fd	                bcs bad_hex     ; taken if eol
.94d0		90 05		bcc $94d7	                bcc got_digit   ; JMP, in effect

.94d2						hex_loop:
.94d2		20 c5 ff	jsr $ffc5	                jsr gsread
.94d5		b0 23		bcs $94fa	                bcs done        ; taken if eol

.94d7						got_digit:
.94d7		20 5d 95	jsr $955d	                jsr xtoi_1_digit; Convert 1 hex digit to a value
						                                ; Entry: A = ASCII digit
						                                ; Exit:  A = value
						                                ;        C=1 if digit was invalid
.94da		b0 21		bcs $94fd	                bcs bad_hex     ; taken if input error
						; wptr<<=4
.94dc		06 b0		asl $b0		                asl wptr
.94de		26 b1		rol $b1		                rol wptr+1
.94e0		b0 1b		bcs $94fd	                bcs bad_hex     ; taken if overflow
.94e2		06 b0		asl $b0		                asl wptr
.94e4		26 b1		rol $b1		                rol wptr+1
.94e6		b0 15		bcs $94fd	                bcs bad_hex     ; taken if overflow
.94e8		06 b0		asl $b0		                asl wptr
.94ea		26 b1		rol $b1		                rol wptr+1
.94ec		b0 0f		bcs $94fd	                bcs bad_hex     ; taken if overflow
.94ee		06 b0		asl $b0		                asl wptr
.94f0		26 b1		rol $b1		                rol wptr+1
.94f2		b0 09		bcs $94fd	                bcs bad_hex     ; taken if overflow
						; wptr|=digit
.94f4		65 b0		adc $b0		                adc wptr
.94f6		85 b0		sta $b0		                sta wptr
.94f8		90 d8		bcc $94d2	                bcc hex_loop    ; always a JMP???

.94fa						done:
.94fa		a5 b0		lda $b0		                lda wptr
.94fc		60		rts		                rts

						;-------------------------------------------------------------------------

.94fd						bad_hex:
.94fd		a2 6d		ldx #$6d	                ldx #$6D        ; TODO: Bad hex
.94ff		4c 57 93	jmp $9357	                jmp do_error

						;-------------------------------------------------------------------------

.9502						decimal:
.9502		c9 2d		cmp #$2d	                cmp #'-'
.9504		08		php		                php             ; save negative flag - Z=1 if negative
.9505		d0 05		bne $950c	                bne decimal_loop
.9507		20 c5 ff	jsr $ffc5	                jsr gsread
.950a		b0 f1		bcs $94fd	                bcs bad_hex

.950c						decimal_loop:
.950c		20 55 95	jsr $9555	                jsr atoi_1_digit; Convert 1 decimal digit to a value
						                                ; Entry: A = ASCII digit
						                                ; Exit:  A = value
						                                ;        C=1 if digit was invalid
.950f		b0 ec		bcs $94fd	                bcs bad_hex
.9511		48		pha		                pha             ; save digit value
.9512		a5 b1		lda $b1		                lda wptr+1
.9514		48		pha		                pha             ; save value MSB
.9515		a5 b0		lda $b0		                lda wptr
						; wptr=wptr*2
.9517		0a		asl a		                asl a
.9518		26 b1		rol $b1		                rol wptr+1
.951a		b0 e1		bcs $94fd	                bcs bad_hex     ; taken if overflow
.951c		0a		asl a		                asl a
.951d		26 b1		rol $b1		                rol wptr+1
.951f		b0 dc		bcs $94fd	                bcs bad_hex     ; taken if overflow
						; wptr=wptr*2+wptr -> wptr*5
.9521		65 b0		adc $b0		                adc wptr
.9523		85 b0		sta $b0		                sta wptr
.9525		68		pla		                pla             ; restore value MSB
.9526		65 b1		adc $b1		                adc wptr+1
.9528		85 b1		sta $b1		                sta wptr+1
.952a		b0 d1		bcs $94fd	                bcs bad_hex     ; taken if overflow
						; wptr=(wptr*2+wptr)*2 -> wptr*5*2 -> wptr*10
.952c		06 b0		asl $b0		                asl wptr
.952e		26 b1		rol $b1		                rol wptr+1
.9530		b0 cb		bcs $94fd	                bcs bad_hex     ; taken if overflow
						; add in digit
.9532		68		pla		                pla             ; restore digit value
.9533		65 b0		adc $b0		                adc wptr
.9535		85 b0		sta $b0		                sta wptr
.9537		90 04		bcc $953d	                bcc L953D
.9539		e6 b1		inc $b1		                inc wptr+1
.953b		f0 c0		beq $94fd	                beq bad_hex     ; taken if overflow

.953d						L953D:
.953d		20 c5 ff	jsr $ffc5	                jsr gsread
.9540		90 ca		bcc $950c	                bcc decimal_loop; taken if not eol
.9542		28		plp		                plp             ; restore negative flag
.9543		d0 0d		bne $9552	                bne L9552    ; taken if positive
						; wptr=-wptr
.9545		38		sec		                sec
.9546		a9 00		lda #$00	                lda #0
.9548		e5 b0		sbc $b0		                sbc wptr
.954a		85 b0		sta $b0		                sta wptr
.954c		a9 00		lda #$00	                lda #0
.954e		e5 b1		sbc $b1		                sbc wptr+1
.9550		85 b1		sta $b1		                sta wptr+1

.9552						L9552:
.9552		a5 b0		lda $b0		                lda wptr
.9554		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Convert 1 decimal digit to a value
						; Entry: A = ASCII digit
						; Exit:  A = value
						;        C=1 if digit was invalid

.9555						atoi_1_digit:   .block
.9555		20 5d 95	jsr $955d	                jsr xtoi_1_digit; Convert 1 hex digit to a value
						                                ; Entry: A = ASCII digit
						                                ; Exit:  A = value
						                                ;        C=1 if digit was invalid
.9558		b0 02		bcs $955c	                bcs L955C
.955a		c9 0a		cmp #$0a	                cmp #$A

.955c						L955C:
.955c		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Convert 1 hex digit to a value
						; Entry: A = ASCII digit
						; Exit:  A = value
						;        C=1 if digit was invalid

.955d						xtoi_1_digit:   .block
.955d		c9 41		cmp #$41	                cmp #'A'
.955f		90 02		bcc $9563	                bcc L9563
.9561		e9 07		sbc #$07	                sbc #7

.9563						L9563:
.9563		38		sec		                sec
.9564		e9 30		sbc #$30	                sbc #'0'
.9566		c9 10		cmp #$10	                cmp #$10
.9568		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9569						L9569:
.9569		08		php		                php
.956a		78		sei		                sei
.956b		a9 a8		lda #$a8	                lda #$A8        ; Read address of ROM pointer table
						                                ; (EAUG p57)
.956d		a2 00		ldx #$00	                ldx #0
.956f		a0 ff		ldy #$ff	                ldy #$FF
.9571		20 f4 ff	jsr $fff4	                jsr osbyte
.9574		86 a8		stx $a8		                stx L00A8
.9576		84 a9		sty $a9		                sty L00A9
.9578		a2 00		ldx #$00	                ldx #0
.957a		a0 3f		ldy #$3f	                ldy #$3F        ; INSV/2*3
						                                ; (see EAUG p171)

.957c						L957C:
.957c		bd ea 95	lda $95ea,x	                lda L95EA,x
.957f		91 a8		sta ($a8),y	                sta (L00A8),y ; store routine LSB
.9581		c8		iny		                iny
.9582		bd eb 95	lda $95eb,x	                lda L95EA+1,x
.9585		91 a8		sta ($a8),y	                sta (L00A8),y ; store routine MSB
.9587		c8		iny		                iny
.9588		a5 f4		lda $f4		                lda L00F4
.958a		91 a8		sta ($a8),y	                sta (L00A8),y ; store ROM bank
.958c		c8		iny		                iny
.958d		e8		inx		                inx
.958e		e8		inx		                inx
.958f		e0 06		cpx #$06	                cpx #6          ; written 3 vectors?
.9591		d0 e9		bne $957c	                bne L957C
.9593		a2 80		ldx #$80	                ldx #$80
.9595		a0 00		ldy #$00	                ldy #0
.9597		2c e9 95	bit $95e9	                bit L95E9

.959a						L959A:
.959a		bd aa 01	lda $01aa,x	                lda insv-$80,x      ; TODO: INSV-$80,x
.959d		20 fd fb	jsr $fbfd	                jsr LFBFD    ; nonsense address in the Electron OS, but presumably meaningful with the rombox?
.95a0		e8		inx		                inx
.95a1		e0 86		cpx #$86	                cpx #$86
.95a3		d0 f5		bne $959a	                bne L959A
						; TODO: tidy these constants up?
.95a5		a9 3f		lda #$3f	                lda #$3F
.95a7		8d 2a 02	sta $022a	                sta insv
.95aa		a9 42		lda #$42	                lda #$42
.95ac		8d 2c 02	sta $022c	                sta remv
.95af		a9 45		lda #$45	                lda #$45
.95b1		8d 2e 02	sta $022e	                sta cnpv
.95b4		a9 ff		lda #$ff	                lda #$FF
.95b6		8d 2b 02	sta $022b	                sta insv+1
.95b9		8d 2d 02	sta $022d	                sta remv+1
.95bc		8d 2f 02	sta $022f	                sta cnpv+1
.95bf		20 07 97	jsr $9707	                jsr L9707
.95c2		28		plp		                plp
.95c3		20 58 85	jsr $8558	                jsr print_following_string
>95c6		31 32 4b 20 62 75 66 66		                .text "12K buffer created in Shadow RAM"
>95ce		65 72 20 63 72 65 61 74 65 64 20 69 6e 20 53 68
>95de		61 64 6f 77 20 52 41 4d
>95e6		0d				                .byte $D
>95e7		0a				                .byte $A
>95e8		00				                .byte 0
.95e9						L95E9:
.95e9		60		rts		                rts

						;-------------------------------------------------------------------------

>95ea		f0 95				L95EA:          .word insv_handler ;
>95ec		39 96				                .word remv_handle
>95ee		98 96				                .word cnpv_handler

						;-------------------------------------------------------------------------

.95f0						insv_handler:
.95f0		e0 03		cpx #$03	                cpx #3
.95f2		f0 0a		beq $95fe	                beq L95FE
.95f4		08		php		                php
.95f5		78		sei		                sei
.95f6		8e 6e 0d	stx $0d6e	                stx L0D6E
.95f9		a2 81		ldx #$81	                ldx #$81
.95fb		4c dd 96	jmp $96dd	                jmp L96DD

						;-------------------------------------------------------------------------

.95fe						L95FE:
.95fe		2c 6c 0d	bit $0d6c	                bit L0D6C
.9601		10 02		bpl $9605	                bpl L9605
.9603		38		sec		                sec
.9604		60		rts		                rts

						;-------------------------------------------------------------------------

.9605						L9605:
.9605		08		php		                php
.9606		78		sei		                sei
.9607		2c e9 95	bit $95e9	                bit L95E9
.960a		ae d8 02	ldx $02d8	                ldx L02D8
.960d		ac 6c 0d	ldy $0d6c	                ldy L0D6C
.9610		20 fd fb	jsr $fbfd	                jsr LFBFD    ; nonsense address in the Electron OS, but presumably meaningful with the rombox?
.9613		48		pha		                pha
.9614		ee d8 02	inc $02d8	                inc L02D8
.9617		d0 0d		bne $9626	                bne L9626
.9619		ae 6c 0d	ldx $0d6c	                ldx L0D6C
.961c		e8		inx		                inx
.961d		e0 30		cpx #$30	                cpx #$30
.961f		d0 02		bne $9623	                bne L9623
.9621		a2 01		ldx #$01	                ldx #1

.9623						L9623:
.9623		8e 6c 0d	stx $0d6c	                stx L0D6C

.9626						L9626:
.9626		20 f6 96	jsr $96f6	                jsr L96F6
.9629		d0 08		bne $9633	                bne L9633
.962b		ad 6c 0d	lda $0d6c	                lda L0D6C
.962e		09 80		ora #$80	                ora #$80
.9630		8d 6c 0d	sta $0d6c	                sta L0D6C

.9633						L9633:
.9633		68		pla		                pla
.9634		28		plp		                plp
.9635		a2 03		ldx #$03	                ldx #3
.9637		18		clc		                clc
.9638		60		rts		                rts

						;-------------------------------------------------------------------------

.9639						remv_handle:
.9639		e0 03		cpx #$03	                cpx #3
.963b		f0 0a		beq $9647	                beq L9647
.963d		08		php		                php
.963e		78		sei		                sei
.963f		8e 6e 0d	stx $0d6e	                stx L0D6E
.9642		a2 83		ldx #$83	                ldx #$83
.9644		4c dd 96	jmp $96dd	                jmp L96DD

						;-------------------------------------------------------------------------

.9647						L9647:
.9647		08		php		                php
.9648		78		sei		                sei
.9649		08		php		                php
.964a		2c 6d 0d	bit $0d6d	                bit L0D6D
.964d		30 43		bmi $9692	                bmi L9692
.964f		20 f6 96	jsr $96f6	                jsr L96F6
.9652		d0 05		bne $9659	                bne L9659
.9654		2c 6c 0d	bit $0d6c	                bit L0D6C
.9657		10 39		bpl $9692	                bpl L9692

.9659						L9659:
.9659		b8		clv		                clv
.965a		ae cf 02	ldx $02cf	                ldx L02CF
.965d		ac 6d 0d	ldy $0d6d	                ldy L0D6D
.9660		20 fd fb	jsr $fbfd	                jsr LFBFD    ; nonsense address in the Electron OS, but presumably meaningful with the rombox?
.9663		28		plp		                plp
.9664		70 27		bvs $968d	                bvs L968D
.9666		48		pha		                pha
.9667		ee cf 02	inc $02cf	                inc L02CF
.966a		d0 0d		bne $9679	                bne L9679
.966c		ae 6d 0d	ldx $0d6d	                ldx L0D6D
.966f		e8		inx		                inx
.9670		e0 30		cpx #$30	                cpx #$30
.9672		d0 02		bne $9676	                bne L9676
.9674		a2 01		ldx #$01	                ldx #1

.9676						L9676:
.9676		8e 6d 0d	stx $0d6d	                stx L0D6D

.9679						L9679:
.9679		20 f6 96	jsr $96f6	                jsr L96F6
.967c		d0 05		bne $9683	                bne L9683
.967e		a0 00		ldy #$00	                ldy #0
.9680		20 bf ff	jsr $ffbf	                jsr oseven

.9683						L9683:
.9683		ad 6c 0d	lda $0d6c	                lda L0D6C
.9686		29 7f		and #$7f	                and #$7F
.9688		8d 6c 0d	sta $0d6c	                sta L0D6C
.968b		68		pla		                pla
.968c		a8		tay		                tay

.968d						L968D:
.968d		28		plp		                plp
.968e		a2 03		ldx #$03	                ldx #3
.9690		18		clc		                clc
.9691		60		rts		                rts

						;-------------------------------------------------------------------------

.9692						L9692:
.9692		28		plp		                plp
.9693		28		plp		                plp
.9694		a2 03		ldx #$03	                ldx #3
.9696		38		sec		                sec
.9697		60		rts		                rts

						;-------------------------------------------------------------------------

.9698						cnpv_handler:
.9698		08		php		                php
.9699		e0 03		cpx #$03	                cpx #3
.969b		f0 09		beq $96a6	                beq L96A6
.969d		78		sei		                sei
.969e		8e 6e 0d	stx $0d6e	                stx L0D6E
.96a1		a2 85		ldx #$85	                ldx #$85
.96a3		4c dd 96	jmp $96dd	                jmp L96DD

						;-------------------------------------------------------------------------

.96a6						L96A6:
.96a6		28		plp		                plp
.96a7		08		php		                php
.96a8		78		sei		                sei
.96a9		50 02		bvc $96ad	                bvc L96AD
.96ab		28		plp		                plp
.96ac		60		rts		                rts

						;-------------------------------------------------------------------------

.96ad						L96AD:
.96ad		ad 6d 0d	lda $0d6d	                lda L0D6D
.96b0		29 7f		and #$7f	                and #$7F
.96b2		85 fa		sta $fa		                sta L00FA
.96b4		38		sec		                sec
.96b5		ad d8 02	lda $02d8	                lda L02D8
.96b8		ed cf 02	sbc $02cf	                sbc L02CF
.96bb		aa		tax		                tax
.96bc		ad 6c 0d	lda $0d6c	                lda L0D6C
.96bf		29 7f		and #$7f	                and #$7F
.96c1		e5 fa		sbc $fa		                sbc L00FA
.96c3		a8		tay		                tay
.96c4		b0 03		bcs $96c9	                bcs L96C9
.96c6		69 2f		adc #$2f	                adc #$2F
.96c8		a8		tay		                tay

.96c9						L96C9:
.96c9		28		plp		                plp
.96ca		08		php		                php
.96cb		90 0e		bcc $96db	                bcc L96DB
.96cd		86 fa		stx $fa		                stx L00FA
.96cf		84 fb		sty $fb		                sty L00FB
.96d1		a9 00		lda #$00	                lda #0
.96d3		e5 fa		sbc $fa		                sbc L00FA
.96d5		aa		tax		                tax
.96d6		a9 2f		lda #$2f	                lda #$2F
.96d8		e5 fb		sbc $fb		                sbc L00FB
.96da		a8		tay		                tay

.96db						L96DB:
.96db		28		plp		                plp
.96dc		60		rts		                rts

						;-------------------------------------------------------------------------

.96dd						L96DD:
.96dd		48		pha		                pha
.96de		b8		clv		                clv
.96df		a0 00		ldy #$00	                ldy #0
.96e1		20 fd fb	jsr $fbfd	                jsr LFBFD    ; nonsense address in the Electron OS, but presumably meaningful with the rombox?
.96e4		8d 6f 0d	sta $0d6f	                sta L0D6E+1
.96e7		ca		dex		                dex
.96e8		20 fd fb	jsr $fbfd	                jsr LFBFD    ; nonsense address in the Electron OS, but presumably meaningful with the rombox?
.96eb		ae 6e 0d	ldx $0d6e	                ldx L0D6E
.96ee		8d 6e 0d	sta $0d6e	                sta L0D6E
.96f1		68		pla		                pla
.96f2		28		plp		                plp
.96f3		6c 6e 0d	jmp ($0d6e)	                jmp (L0D6E)

						;-------------------------------------------------------------------------

.96f6						L96F6:       .block
.96f6		ad d8 02	lda $02d8	                lda L02D8
.96f9		cd cf 02	cmp $02cf	                cmp L02CF
.96fc		d0 08		bne $9706	                bne L9706
.96fe		ad 6c 0d	lda $0d6c	                lda L0D6C
.9701		4d 6d 0d	eor $0d6d	                eor L0D6D
.9704		29 7f		and #$7f	                and #$7F

.9706						L9706:
.9706		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9707						L9707:       .block
.9707		a9 01		lda #$01	                lda #1
.9709		8d 6c 0d	sta $0d6c	                sta L0D6C
.970c		8d 6d 0d	sta $0d6d	                sta L0D6D
.970f		a9 00		lda #$00	                lda #0
.9711		8d d8 02	sta $02d8	                sta L02D8
.9714		8d cf 02	sta $02cf	                sta L02CF
.9717		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

.9718						cmd_joystick_setup:
.9718		a2 00		ldx #$00	                ldx #0
.971a		a9 04		lda #$04	                lda #4
.971c		a0 00		ldy #$00	                ldy #0
.971e		a2 01		ldx #$01	                ldx #1
.9720		20 f4 ff	jsr $fff4	                jsr osbyte      ; disable cursor editing
.9723		a2 01		ldx #$01	                ldx #1
.9725		a9 0f		lda #$0f	                lda #$F
.9727		20 f4 ff	jsr $fff4	                jsr osbyte      ; flush input buffer
.972a		a2 1b		ldx #$1b	                ldx #$1B
.972c		a0 00		ldy #$00	                ldy #0
.972e		a9 e5		lda #$e5	                lda #$E5
.9730		20 f4 ff	jsr $fff4	                jsr osbyte      ; make Escape return ASCII 27
.9733		a9 00		lda #$00	                lda #0
.9735		85 b3		sta $b3		                sta L00B3

.9737						L9737:
.9737		8a		txa		                txa
.9738		48		pha		                pha
.9739		20 58 85	jsr $8558	                jsr print_following_string
>973c		50 72 65 73 73 20		aPress:         .text "Press "
>9742		00				                .byte 0
						; Print action name
.9743		bd 88 98	lda $9888,x	                lda action_name_offsets,x
.9746		aa		tax		                tax

.9747						L9747:
.9747		bd 8d 98	lda $988d,x	                lda action_names,x; "UP   "
.974a		f0 06		beq $9752	                beq wait_for_key_loop
.974c		20 ee ff	jsr $ffee	                jsr oswrch
.974f		e8		inx		                inx
.9750		d0 f5		bne $9747	                bne L9747

.9752						wait_for_key_loop:
.9752		a2 00		ldx #$00	                ldx #0
.9754		a0 00		ldy #$00	                ldy #0
.9756		20 83 98	jsr $9883	                jsr call_osbyte_81; poll for keys
.9759		c0 ff		cpy #$ff	                cpy #$FF
.975b		d0 27		bne $9784	                bne got_key     ; taken with X=ASCII code if any key pressed
.975d		a2 ff		ldx #$ff	                ldx #$FF
.975f		a0 ff		ldy #$ff	                ldy #$FF
.9761		20 83 98	jsr $9883	                jsr call_osbyte_81; check for SHIFT
.9764		a2 01		ldx #$01	                ldx #1
.9766		c0 ff		cpy #$ff	                cpy #$FF
.9768		f0 1a		beq $9784	                beq got_key     ; taken with X=1 if SHIFT pressed
.976a		a2 fe		ldx #$fe	                ldx #$FE
.976c		a0 ff		ldy #$ff	                ldy #$FF
.976e		20 83 98	jsr $9883	                jsr call_osbyte_81; check for CTRL
.9771		a2 02		ldx #$02	                ldx #2
.9773		c0 ff		cpy #$ff	                cpy #$FF
.9775		f0 0d		beq $9784	                beq got_key     ; taken with X=2 if CTRL pressed
.9777		a2 bf		ldx #$bf	                ldx #$BF
.9779		a0 ff		ldy #$ff	                ldy #$FF
.977b		20 83 98	jsr $9883	                jsr call_osbyte_81; check for Caps Lock
.977e		a2 03		ldx #$03	                ldx #3
.9780		c0 ff		cpy #$ff	                cpy #$FF
.9782		d0 ce		bne $9752	                bne wait_for_key_loop; taken if no keys pressed
						; fall through with X=3 if Caps Lock pressed

.9784						got_key:
.9784		c0 1b		cpy #$1b	                cpy #$1B
.9786		d0 05		bne $978d	                bne L978D    ; taken if Escape wasn't pressed
.9788		a2 1b		ldx #$1b	                ldx #$1B        ; set X=27, indicating Escape
.978a		20 bf 99	jsr $99bf	                jsr clear_escape_condition

.978d						L978D:
.978d		e4 b3		cpx $b3		                cpx L00B3
.978f		f0 c1		beq $9752	                beq wait_for_key_loop
.9791		86 b3		stx $b3		                stx L00B3
.9793		20 08 93	jsr $9308	                jsr print_1_space
.9796		a2 00		ldx #$00	                ldx #0

.9798						L9798:
.9798		bd ab 98	lda $98ab,x	                lda keys_table,x
.979b		f0 b5		beq $9752	                beq wait_for_key_loop
.979d		c5 b3		cmp $b3		                cmp L00B3
.979f		f0 0c		beq $97ad	                beq L97AD

.97a1						L97A1:
.97a1		e8		inx		                inx
.97a2		bd ab 98	lda $98ab,x	                lda keys_table,x
.97a5		10 fa		bpl $97a1	                bpl L97A1
.97a7		e8		inx		                inx
.97a8		d0 ee		bne $9798	                bne L9798

.97aa						L97AA:
.97aa		20 ee ff	jsr $ffee	                jsr oswrch

.97ad						L97AD:
.97ad		e8		inx		                inx

.97ae						L97AE:
.97ae		bd ab 98	lda $98ab,x	                lda keys_table,x
.97b1		10 f7		bpl $97aa	                bpl L97AA
.97b3		a8		tay		                tay
.97b4		68		pla		                pla
.97b5		aa		tax		                tax
.97b6		98		tya		                tya
.97b7		bc f7 83	ldy $83f7,x	                ldy rom_banks_table,x; table holding ROM bank numbers for 5 unused ROMs
.97ba		29 7f		and #$7f	                and #$7F             ; mask off bit 7
.97bc		99 a0 02	sta $02a0,y	                sta os_rom_types,y   ; store key for this action
.97bf		20 03 93	jsr $9303	                jsr print_1_newline
.97c2		e8		inx		                inx
.97c3		e0 05		cpx #$05	                cpx #5          ; for all 5 actions...
.97c5		f0 03		beq $97ca	                beq L97CA
.97c7		4c 37 97	jmp $9737	                jmp L9737

						;-------------------------------------------------------------------------

.97ca						L97CA:
.97ca		a9 04		lda #$04	                lda #4
.97cc		a0 00		ldy #$00	                ldy #0
.97ce		a2 00		ldx #$00	                ldx #0
.97d0		20 f4 ff	jsr $fff4	                jsr osbyte      ; restore cursor editing
.97d3		a2 00		ldx #$00	                ldx #0
.97d5		a0 00		ldy #$00	                ldy #0
.97d7		a9 e5		lda #$e5	                lda #$E5
.97d9		20 f4 ff	jsr $fff4	                jsr osbyte      ; reinstate Escape behaviour
.97dc		60		rts		                rts

						;-------------------------------------------------------------------------

.97dd						cmd_joystick_test:.block
.97dd		ad 55 03	lda $0355	                lda os_screen_mode
.97e0		48		pha		                pha
.97e1		20 58 85	jsr $8558	                jsr print_following_string
>97e4		16 06				                .byte 22, 6     ; 0 ; MODE 6
>97e6		1f 08 05			                .byte 31, 8, 5  ; 0 ; PRINT TAB(8,5)
>97e9		4a 20 4f 20 59 20 53 20		                .text "J O Y S T I C K   T E S T"
>97f1		54 20 49 20 43 20 4b 20 20 20 54 20 45 20 53 20
>9801		54
>9802		00				                .byte 0
.9803		a2 00		ldx #$00	                ldx #0
.9805		a0 0a		ldy #$0a	                ldy #$A
.9807		20 62 98	jsr $9862	                jsr set_cursor_visibility; Hide cursor

.980a						loop:
.980a		24 ff		bit $ff		                bit L00FF
.980c		30 3c		bmi $984a	                bmi L984A    ; Taken if Escape pressed
.980e		a2 00		ldx #$00	                ldx #0          ; X = action index

.9810						check_actions:
.9810		20 58 85	jsr $8558	                jsr print_following_string
>9813		1f 11 00			                .byte 31, 17, 0 ; 0 ; PRINT TAB(17,???)
.9816		8a		txa		                txa
.9817		48		pha		                pha             ; Save action index
.9818		18		clc		                clc
.9819		69 0a		adc #$0a	                adc #$A         ; Y coord = 10 + action index
.981b		20 ee ff	jsr $ffee	                jsr oswrch
.981e		20 da 83	jsr $83da	                jsr read_joystick; Read joystick
						                                 ; Entry: X = action index
						                                 ; Exit:  A=$00 if bit set, A=$FF if bit clear
.9821		f0 15		beq $9838	                beq print_no_action_name
.9823		8a		txa		                txa
.9824		0a		asl a		                asl a           ; 2*index
.9825		85 b0		sta $b0		                sta wptr
.9827		0a		asl a		                asl a           ; 4*index
.9828		65 b0		adc $b0		                adc wptr        ; 4*index+2*index
.982a		aa		tax		                tax
.982b		a0 05		ldy #$05	                ldy #5

.982d						print_action_name:
.982d		bd 8d 98	lda $988d,x	                lda action_names,x; "UP   "
.9830		f0 0f		beq $9841	                beq L9841
.9832		20 ee ff	jsr $ffee	                jsr oswrch
.9835		e8		inx		                inx
.9836		d0 f5		bne $982d	                bne print_action_name

.9838						print_no_action_name:
.9838		20 58 85	jsr $8558	                jsr print_following_string
>983b		20 20 20 20 20			                .text "     "
>9840		00				                .byte 0
.9841						L9841:
.9841		68		pla		                pla
.9842		aa		tax		                tax
.9843		e8		inx		                inx
.9844		e0 05		cpx #$05	                cpx #5          ; 5 action indexes...
.9846		d0 c8		bne $9810	                bne check_actions
.9848		f0 c0		beq $980a	                beq loop

.984a						L984A:
.984a		a2 0a		ldx #$0a	                ldx #$A
.984c		a0 0a		ldy #$0a	                ldy #$A
.984e		20 62 98	jsr $9862	                jsr set_cursor_visibility; show cursor
.9851		a9 7e		lda #$7e	                lda #$7E
.9853		20 f4 ff	jsr $fff4	                jsr osbyte      ; acknowledge escape
						; restore old screen mode
.9856		a9 16		lda #$16	                lda #22
.9858		20 ee ff	jsr $ffee	                jsr oswrch
.985b		68		pla		                pla
.985c		20 ee ff	jsr $ffee	                jsr oswrch
.985f		68		pla		                pla
.9860		68		pla		                pla
.9861		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

						; Set cursor visibility
						; Entry: X=0 Y=10 - hide cursor
						;        X=10 Y=10 - show cursor

.9862						set_cursor_visibility:.block
.9862		bd 6d 98	lda $986d,x	                lda L986D,x
.9865		20 ee ff	jsr $ffee	                jsr oswrch
.9868		e8		inx		                inx
.9869		88		dey		                dey
.986a		d0 f6		bne $9862	                bne set_cursor_visibility; Set cursor visibility
						                                         ; Entry: X=0 Y=10 - hide cursor
						                                         ;        X=10 Y=10 - show cursor
.986c		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

>986d		17 01 00 00 00 00 00 00		L986D:      .byte 23, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0
>9875		00 00
>9877		17 01 01 00 00 00 00 00		                .byte 23, 1, 1, 0, 0, 0, 0, 0, 0, 0; 0
>987f		00 00

						;-------------------------------------------------------------------------

.9881		a0 ff		ldy #$ff	                ldy #$FF

						;-------------------------------------------------------------------------

.9883						call_osbyte_81: .block
.9883		a9 81		lda #$81	                lda #$81
.9885		4c f4 ff	jmp $fff4	                jmp osbyte
						                .endblock

						;-------------------------------------------------------------------------

>9888		00				action_name_offsets:.byte 0
>9889		06				                .byte 6
>988a		0c				                .byte $C
>988b		12				                .byte $12
>988c		18				                .byte $18
>988d		55 50 20 20 20			action_names:   .text "UP   "
>9892		00				                .byte 0
>9893		44 4f 57 4e 20			                .text "DOWN "
>9898		00				                .byte 0
>9899		4c 45 46 54 20			                .text "LEFT "
>989e		00				                .byte 0
>989f		52 49 47 48 54			                .text "RIGHT"
>98a4		00				                .byte 0
>98a5		46 49 52 45 20			                .text "FIRE "
>98aa		00				                .byte 0
						; Sequence of variable-length structs:
						; +0 - ASCII code/control code
						; +1... - Printable key name
						; +N - Internal key number, bit 7 set

						key_table_entry: .macro ascii,name,key_number
						                .endmacro

.98ab						keys_table:
>98ab		41				                .byte 'A'
>98ac		41				                .text 'A'
>98ad		c1				                .byte $C1
>98ae		42				                .byte 'B'
>98af		42				                .text 'B'
>98b0		e4				                .byte $E4
>98b1		43				                .byte 'C'
>98b2		43				                .text 'C'
>98b3		d2				                .byte $D2
>98b4		44				                .byte 'D'
>98b5		44				                .text 'D'
>98b6		b2				                .byte $B2
>98b7		45				                .byte 'E'
>98b8		45				                .text 'E'
>98b9		a2				                .byte $A2
>98ba		46				                .byte 'F'
>98bb		46				                .text 'F'
>98bc		c3				                .byte $C3
>98bd		47				                .byte 'G'
>98be		47				                .text 'G'
>98bf		d3				                .byte $D3
>98c0		48				                .byte 'H'
>98c1		48				                .text 'H'
>98c2		d4				                .byte $D4
>98c3		49				                .byte 'I'
>98c4		49				                .text 'I'
>98c5		a6				                .byte $A6
>98c6		4a				                .byte 'J'
>98c7		4a				                .text 'J'
>98c8		c5				                .byte $C5
>98c9		4b				                .byte 'K'
>98ca		4b				                .text 'K'
>98cb		c6				                .byte $C6
>98cc		4c				                .byte 'L'
>98cd		4c				                .text 'L'
>98ce		d6				                .byte $D6
>98cf		4d				                .byte 'M'
>98d0		4d				                .text 'M'
>98d1		e5				                .byte $E5
>98d2		4e				                .byte 'N'
>98d3		4e				                .text 'N'
>98d4		d5				                .byte $D5
>98d5		4f				                .byte 'O'
>98d6		4f				                .text 'O'
>98d7		b6				                .byte $B6
>98d8		50				                .byte 'P'
>98d9		50				                .text 'P'
>98da		b7				                .byte $B7
>98db		51				                .byte 'Q'
>98dc		51				                .text 'Q'
>98dd		90				                .byte $90
>98de		52				                .byte 'R'
>98df		52				                .text 'R'
>98e0		b3				                .byte $B3
>98e1		53				                .byte 'S'
>98e2		53				                .text 'S'
>98e3		d1				                .byte $D1
>98e4		54				                .byte 'T'
>98e5		54				                .text 'T'
>98e6		a3				                .byte $A3
>98e7		55				                .byte 'U'
>98e8		55				                .text 'U'
>98e9		b5				                .byte $B5
>98ea		56				                .byte 'V'
>98eb		56				                .text 'V'
>98ec		e3				                .byte $E3
>98ed		57				                .byte 'W'
>98ee		57				                .text 'W'
>98ef		a1				                .byte $A1
>98f0		58				                .byte 'X'
>98f1		58				                .text 'X'
>98f2		c2				                .byte $C2
>98f3		59				                .byte 'Y'
>98f4		59				                .text 'Y'
>98f5		c4				                .byte $C4
>98f6		5a				                .byte 'Z'
>98f7		5a				                .text 'Z'
>98f8		e1				                .byte $E1
>98f9		30				                .byte '0'
>98fa		30				                .text '0'
>98fb		a7				                .byte $A7
>98fc		31				                .byte '1'
>98fd		31				                .text '1'
>98fe		b0				                .byte $B0
>98ff		32				                .byte '2'
>9900		32				                .text '2'
>9901		b1				                .byte $B1
>9902		33				                .byte '3'
>9903		33				                .text '3'
>9904		91				                .byte $91
>9905		34				                .byte '4'
>9906		34				                .text '4'
>9907		92				                .byte $92
>9908		35				                .byte '5'
>9909		35				                .text '5'
>990a		93				                .byte $93
>990b		36				                .byte '6'
>990c		36				                .text '6'
>990d		b4				                .byte $B4
>990e		37				                .byte '7'
>990f		37				                .text '7'
>9910		a4				                .byte $A4
>9911		38				                .byte '8'
>9912		38				                .text '8'
>9913		95				                .byte $95
>9914		39				                .byte '9'
>9915		39				                .text '9'
>9916		a5				                .byte $A5
>9917		2d				                .byte '-'
>9918		2d				                .text '-'
>9919		97				                .byte $97
>991a		3b				                .byte ';'
>991b		3b				                .text ';'
>991c		d7				                .byte $D7
>991d		3a				                .byte ':'
>991e		3a				                .text ':'
>991f		c8				                .byte $C8
>9920		2c				                .byte ','
>9921		2c				                .text ','
>9922		e6				                .byte $E6
>9923		2e				                .byte '.'
>9924		2e				                .text '.'
>9925		e7				                .byte $E7
>9926		2f				                .byte '/'
>9927		2f				                .text '/'
>9928		e8				                .byte $E8
>9929		20				                .byte ' '
>992a		53 50 41 43 45			                .text "SPACE"
>992f		e2				                .byte $E2
>9930		1b				                .byte $1B
>9931		45 53 43 41 50 45		                .text "ESCAPE"
>9937		f0				                .byte $F0
>9938		7f				                .byte $7F
>9939		44 45 4c 45 54 45		                .text "DELETE"
>993f		d9				                .byte $D9
>9940		0d				                .byte $D
>9941		52 45 54 55 52 4e		                .text "RETURN"
>9947		c9				                .byte $C9
>9948		8b				                .byte $8B
>9949		43 55 52 53 4f 52 20 55		                .text "CURSOR UP"
>9951		50
>9952		b9				                .byte $B9
>9953		8a				                .byte $8A
>9954		43 55 52 53 4f 52 20 44		                .text "CURSOR DOWN"
>995c		4f 57 4e
>995f		a9				                .byte $A9
>9960		88				                .byte $88
>9961		43 55 52 53 4f 52 20 4c		                .text "CURSOR LEFT"
>9969		45 46 54
>996c		99				                .byte $99
>996d		89				                .byte $89
>996e		43 55 52 53 4f 52 20 52		                .text "CURSOR RIGHT"
>9976		49 47 48 54
>997a		f9				                .byte $F9
>997b		87				                .byte $87
>997c		43 4f 50 59			                .text "COPY"
>9980		e9				                .byte $E9
>9981		01				                .byte 1
>9982		53 48 49 46 54			                .text "SHIFT"
>9987		80				                .byte $80
>9988		02				                .byte 2
>9989		43 54 52 4c			                .text "CTRL"
>998d		81				                .byte $81
>998e		03				                .byte 3
>998f		43 41 50 53 20 4c 4f 43		                .text "CAPS LOCK"
>9997		4b
>9998		c0				                .byte $C0
>9999		00				                .text 0
>999a		00				cmd_joystick_banner:.byte 0
>999b		55 70 20 44 6f 77 6e 20		                .text "Up Down Left Right Fire"
>99a3		4c 65 66 74 20 52 69 67 68 74 20 46 69 72 65
>99b2		00				                .byte 0
>99b3		53 45 54 55 50			                .text "SETUP"
>99b8		00				                .byte 0
>99b9		54 45 53 54			                .text "TEST"
>99bd		00				                .byte 0
>99be		00				                .byte 0

						;-------------------------------------------------------------------------

.99bf						clear_escape_condition:.block
.99bf		a9 7e		lda #$7e	                lda #$7E
.99c1		4c f4 ff	jmp $fff4	                jmp osbyte
						                .endblock

						;-------------------------------------------------------------------------

.99c4						L99C4:
.99c4		08		php		                php
.99c5		78		sei		                sei
.99c6		98		tya		                tya
.99c7		48		pha		                pha
.99c8		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.99cb		29 40		and #$40	                and #$40
.99cd		f0 0c		beq $99db	                beq L99DB
.99cf		8a		txa		                txa
.99d0		29 3f		and #$3f	                and #$3F
.99d2		a8		tay		                tay
.99d3		b9 20 9a	lda $9a20,y	                lda L9A20,y
.99d6		29 7f		and #$7f	                and #$7F
.99d8		20 e1 99	jsr $99e1	                jsr L99E1

.99db						L99DB:
.99db		aa		tax		                tax
.99dc		68		pla		                pla
.99dd		a8		tay		                tay
.99de		28		plp		                plp
.99df		8a		txa		                txa
.99e0		60		rts		                rts

						;-------------------------------------------------------------------------

.99e1						L99E1:       .block
.99e1		a2 00		ldx #$00	                ldx #0
.99e3		cd a2 02	cmp $02a2	                cmp os_rom_types+2
.99e6		f0 18		beq $9a00	                beq L9A00
.99e8		e8		inx		                inx
.99e9		cd a3 02	cmp $02a3	                cmp os_rom_types+3
.99ec		f0 12		beq $9a00	                beq L9A00
.99ee		e8		inx		                inx
.99ef		cd a8 02	cmp $02a8	                cmp os_rom_types+8
.99f2		f0 0c		beq $9a00	                beq L9A00
.99f4		e8		inx		                inx
.99f5		cd a9 02	cmp $02a9	                cmp os_rom_types+9
.99f8		f0 06		beq $9a00	                beq L9A00
.99fa		e8		inx		                inx
.99fb		cd aa 02	cmp $02aa	                cmp os_rom_types+$A
.99fe		d0 1d		bne $9a1d	                bne L9A1D

.9a00						L9A00:
.9a00		ad 90 02	lda $0290	                lda os_unused   ; Flags ($0290 - unused by Electron OS)
						                                ; %.a....jj    %jj = joystick interface to use
						                                ;                a = 0=ADC, 1=9-pin joysticks
.9a03		29 03		and #$03	                and #3
.9a05		a8		tay		                tay
.9a06		b9 21 82	lda $8221,y	                lda fred_offsets,y; offset of joystick I/O by joystick index
						                                  ; (see table on p6 of Elk Expansion manual)
.9a09		a8		tay		                tay
.9a0a		b9 00 fc	lda $fc00,y	                lda $FC00,y
.9a0d		6a		ror a		                ror a
.9a0e		90 04		bcc $9a14	                bcc L9A14
.9a10		6a		ror a		                ror a
.9a11		b0 0a		bcs $9a1d	                bcs L9A1D
.9a13		2a		rol a		                rol a

.9a14						L9A14:
.9a14		2a		rol a		                rol a
.9a15		3d f2 83	and $83f2,x	                and table_1_2_4_8_16,x
.9a18		f0 02		beq $9a1c	                beq L9A1C
.9a1a		a9 80		lda #$80	                lda #$80

.9a1c						L9A1C:
.9a1c		60		rts		                rts

						;-------------------------------------------------------------------------

.9a1d						L9A1D:
.9a1d		a9 00		lda #$00	                lda #0
.9a1f		60		rts		                rts
						                .endblock

						;-------------------------------------------------------------------------

>9a20		00 00 00 00 79 69 00 62		L9A20:      .byte 0, 0, 0, 0, $79, $69, 0, $62; 0
>9a28		19 29 49 59 17 39 48 00		                .byte $19, $29, $49, $59, $17, $39, $48, 0; 8
>9a30		27 37 57 68 25 36 56 67		                .byte $27, $37, $57, $68, $25, $36, $56, $67; 16
>9a38		15 26 46 66 24 35 45 65		                .byte $15, $26, $46, $66, $24, $35, $45, $65; 24
>9a40		34 44 54 55 13 23 53 64		                .byte $34, $44, $54, $55, $13, $23, $53, $64; 32
>9a48		12 33 43 63 11 22 32 52		                .byte $12, $33, $43, $63, $11, $22, $32, $52; 40
>9a50		31 21 51 42 30 10 41 61		                .byte $31, $21, $51, $42, $30, $10, $41, $61; 48
>9a58		70 40 01 00 00 00 00 00		                .byte $70, $40, 1, 0, 0, 0, 0, 0            ; 56

						;-------------------------------------------------------------------------

>9a60						                .fill $a000-3-*
.9ffd		4c c4 99	jmp $99c4	                jmp L99C4

						;-------------------------------------------------------------------------

;******  End of listing
